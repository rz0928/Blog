{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cat1.jpg","path":"images/cat1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cat2.jpg","path":"images/cat2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"20dbc2e1dc5e27127dc371cd16c03151f50d0130","modified":1715688717905},{"_id":"source/_drafts/基于redis分布式锁的简单实现.md","hash":"e0286b794621247b6282b934beeca18dcf340d1b","modified":1714830249516},{"_id":"source/_posts/Spring自动装配原理.md","hash":"bdc9af4554531768483c30870764fbf643e525dc","modified":1715667816457},{"_id":"source/_drafts/什么是HTTPS.md","hash":"938c16acfd471078b2ef4d357041c26a3e2aa745","modified":1714827752239},{"_id":"source/categories/index.md","hash":"e29008df0a77a03d8bc3fe7d8f8e22a6fc48567b","modified":1715688702191},{"_id":"source/tags/index.md","hash":"d7d6c9d80fa5f52f3f96ab364de5f17352e008b3","modified":1715688796357},{"_id":"source/_posts/ThreadLocal小结.md","hash":"236420dca5f7a2746a3c36fc14c1a6b1e7391538","modified":1715238535048},{"_id":"source/_posts/java两锁之一的ReetrantLock.md","hash":"615cf25a31500928e45ffe4079038534694575b0","modified":1715601815846},{"_id":"source/_posts/Spring自动装配原理/模块装配二.png","hash":"2cf88ddbf269d9fdb41df66ff1c8d9df7805b5e6","modified":1714720472707},{"_id":"source/_posts/java两锁之一的synchronized.md","hash":"6c9c8a2924143bdc640fa417a0d252ed6db55783","modified":1715667801542},{"_id":"source/_posts/java两锁之一的synchronized/image-20240513145730228.png","hash":"69b8f94715243e31b3df1c58a974175093bf3bc5","modified":1715583450281},{"_id":"source/_posts/Spring自动装配原理/模块装配方式一.png","hash":"b7d05a1fbead943ab6c17fc8cee78335085cf869","modified":1714719641133},{"_id":"source/_posts/java两锁之一的synchronized/image-20240513150908609.png","hash":"e5a9c4fd8c08519d5f19713f7ed65a85117c4f1c","modified":1715584148630},{"_id":"source/_posts/java两锁之一的synchronized/java重量级锁.webp","hash":"011b924544ca2bfea4a42539b71545a40f2b5da1","modified":1715588354009},{"_id":"source/_posts/java两锁之一的synchronized/jvm_markWord.png","hash":"7db0b5805349a77b68e50f3403fc764027782733","modified":1712642133183},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1715669101119},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1715669101119},{"_id":"themes/next/.stylelintrc","hash":"20f46858e47aba6b3fc47e9b43e9f7531fa66e33","modified":1715669101129},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1715669101129},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1715669101129},{"_id":"themes/next/README.md","hash":"ede4d2a210b26eabd1546c864ff0bc40455122b5","modified":1715669101129},{"_id":"themes/next/_vendors.yml","hash":"673b2abe0100894b014e94ee3c68ad8528cf126d","modified":1715669101129},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1715669101129},{"_id":"themes/next/eslint.config.js","hash":"e35570c8e7ef9ea4adad7bafb3558dfd8e928e48","modified":1715669101139},{"_id":"themes/next/.githooks/install.js","hash":"72757c6827909a5f2c217ddbbdf6034ca6fab74a","modified":1715669101119},{"_id":"themes/next/package.json","hash":"aba13d6547cae25364dc84cadccf717a82ba2a19","modified":1715669101199},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1715669101119},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1715669101199},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"82a3d202da8fe6ce765715bd5b7571676e90364d","modified":1715669101119},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1715669101119},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"610675119f83cdbf3f19d7996b17e33062e3b165","modified":1715669101119},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1715669101129},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1715669101119},{"_id":"themes/next/.github/labeler.yml","hash":"35da1a37e9a6bdee1eeae30a8816cd75c9a04b3b","modified":1715669101129},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"d403cbbbd0c554563e9e678ff82120ef9451d98a","modified":1715669101129},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1715669101139},{"_id":"themes/next/.github/release.yml","hash":"83b4dae3f8d76619e208d2110a247b3ccadd64d8","modified":1715669101129},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1715669101139},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1715669101139},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1715669101139},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1715669101139},{"_id":"themes/next/languages/de.yml","hash":"5101612f7cac38884206d28319532f1aab32fbe6","modified":1715669101139},{"_id":"themes/next/languages/ar.yml","hash":"c77fc13e0431e71eeb0f767a0a436284fc81df90","modified":1715669101139},{"_id":"themes/next/languages/bn.yml","hash":"30ffd43588ddf2cd39432d964087242e1c3e5407","modified":1715669101139},{"_id":"themes/next/languages/en.yml","hash":"5ca2c0b3c95dd87485f2d2b3477f88810ad1a63b","modified":1715669101139},{"_id":"themes/next/languages/eo.yml","hash":"7bd0124c2d1dcdbfde350fce335e130556ebcee8","modified":1715669101139},{"_id":"themes/next/languages/fa.yml","hash":"cc6ef3144b954daa29ce7d42f08191eafe052fab","modified":1715669101149},{"_id":"themes/next/languages/es.yml","hash":"31c2a47d14cd5b804cae0c0b44d43bece069d3aa","modified":1715669101139},{"_id":"themes/next/languages/id.yml","hash":"bd2c30def05a37c66653900ca07952d52a142961","modified":1715669101149},{"_id":"themes/next/languages/fr.yml","hash":"3a7469446f77e5d1a12eee828ebc49ecb43b6c35","modified":1715669101149},{"_id":"themes/next/languages/it.yml","hash":"4969c4f17d88003135218de72ddf0bf8d894dc07","modified":1715669101149},{"_id":"themes/next/languages/ja.yml","hash":"e660ec12b9eade103492aba7aa9b23ef06d353a9","modified":1715669101149},{"_id":"themes/next/languages/ko.yml","hash":"04927e331652ee13f9c8a110fe12d7f936a6b0e6","modified":1715669101149},{"_id":"themes/next/languages/pt-BR.yml","hash":"ff9aa6a6549d07b7dc667094f34a06945e2c21b4","modified":1715669101149},{"_id":"themes/next/languages/ru.yml","hash":"d726265bc5cf8bd4fb64f85b2d07b3326439bb00","modified":1715669101149},{"_id":"themes/next/languages/pt.yml","hash":"1fa9f4f4f208191afd0e6108ce89d91c657a6bd0","modified":1715669101149},{"_id":"themes/next/languages/nl.yml","hash":"4575f93c4ee4383bdfaca01ad6ffff5664cbbbae","modified":1715669101149},{"_id":"themes/next/languages/si.yml","hash":"07f98d6ca99bceef35254c60fc0e4401ff608557","modified":1715669101149},{"_id":"themes/next/languages/th.yml","hash":"dc434da945d52dc7a8d26acc80b23e6922712f89","modified":1715669101149},{"_id":"themes/next/languages/tk.yml","hash":"7b9115e0520dc81a95a7c8e4f56a01fc84f74017","modified":1715669101149},{"_id":"themes/next/languages/tr.yml","hash":"822ec400a0a2bb2245abf31e9ed4f3af77b2814e","modified":1715669101149},{"_id":"themes/next/languages/uk.yml","hash":"10a2f2e7183410d1d10fa937e3e0198b46bf4930","modified":1715669101149},{"_id":"themes/next/languages/vi.yml","hash":"8344cb90ee92a21a398faff3317c025a43446db5","modified":1715669101149},{"_id":"themes/next/languages/zh-CN.yml","hash":"c06c95121b3e5bd5abe01848073fbe7f9d6dcda9","modified":1715669101149},{"_id":"themes/next/layout/_layout.njk","hash":"0f2760cd7550ca30ffcc28e2dbd7f031a237b5a7","modified":1715669101159},{"_id":"themes/next/languages/zh-HK.yml","hash":"6cfdc633870b814f3d75438e86f6ee5dba068987","modified":1715669101149},{"_id":"themes/next/languages/zh-TW.yml","hash":"198e3745b99ba5a2b75cc24d03f3412e272b7fa1","modified":1715669101159},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1715669101199},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1715669101199},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1715669101199},{"_id":"themes/next/layout/page.njk","hash":"d24238eea91a347050a663c7a7de8cebaab4c595","modified":1715669101199},{"_id":"themes/next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1715669101199},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1715669101309},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1715669101119},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1715669101119},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1715669101199},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"82a2df4c676ae45b2768c71c724b188475c88ca5","modified":1715669101129},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1715669101119},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1715669101119},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"dc4809131c54a1d9f8e7392aeaf53b13c6befd90","modified":1715669101129},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e8ca602587b3abe08b60fc1bdc1c2d62aeeb85bb","modified":1715669101129},{"_id":"themes/next/.github/workflows/linter.yml","hash":"294660e1b6275a0fe4db2a44e5b6b679467d29fc","modified":1715669101129},{"_id":"themes/next/.github/workflows/lock.yml","hash":"80dc185dfaeb2927db72a44ff2382e05f47a2df5","modified":1715669101129},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dba3f1d4bc4d2fab51d73d134ed5c7448a0976dc","modified":1715669101129},{"_id":"themes/next/docs/ru/README.md","hash":"c101be459aaff0fb7ec8a2d17031a3795545ea0d","modified":1715669101139},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"e077bebf4fb89b159b840b30f0230b95ff7db8a5","modified":1715669101139},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"a60b386c7889f25f811182cae76e6474cb3254d1","modified":1715669101159},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1715669101139},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1715669101159},{"_id":"themes/next/layout/_macro/post.njk","hash":"c39170b22c4c9cb11d935c301a90ad8c18f3e0e8","modified":1715669101159},{"_id":"themes/next/layout/_partials/footer.njk","hash":"8047c6e8aa8fbf7f177d5f97b5df3df6045fb38b","modified":1715689152541},{"_id":"themes/next/docs/zh-CN/README.md","hash":"48d170250e3f0c7aaf6ede8d52c602422936ba1e","modified":1715669101139},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1715669101159},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1715669101179},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1715669101159},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1715669101169},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"bb5d32170b469dc018ceaa10a5b7cb892c9b85a4","modified":1715669101169},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6cb844a8c24642abc8733cbc8efcbcdbbf9481e8","modified":1715669101179},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"9ef81adb0c35ebdb4499602155e87611aee0762a","modified":1715669101179},{"_id":"themes/next/layout/_third-party/index.njk","hash":"9bab629e2971b029545511b48f397445858ac7f0","modified":1715669101189},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1715669101189},{"_id":"themes/next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1715669101199},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1715669101189},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1715669101189},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1715669101209},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1715669101229},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1715669101209},{"_id":"themes/next/scripts/filters/minify.js","hash":"0f6b9b0eb41f6319e75ff86f9254cf1a9d3333b8","modified":1715669101219},{"_id":"themes/next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1715669101219},{"_id":"themes/next/source/css/_mixins.styl","hash":"1e56914de01b968b535d777f5b717e88002021e9","modified":1715669101269},{"_id":"themes/next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1715669101279},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1715669101219},{"_id":"themes/next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1715669101279},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bf50f31a3adecef3f42a2df7cda70a369d102e09","modified":1715669101219},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1715669101219},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"7d0b7ea07f35739d9f05fc133282fa188a2f2991","modified":1715669101219},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1715669101219},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1715669101219},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ceff5e76564a5d6ed3e0222bccf581e106d80f3c","modified":1715669101219},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"12814eb1845830204e3a398eb93a2c15e0ff8d94","modified":1715669101219},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1715669101219},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1715669101219},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"652140814527db74bcde9110142824dc727be889","modified":1715669101219},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1715669101219},{"_id":"themes/next/scripts/tags/index.js","hash":"1a680bb01e14152905efe3ef624621dd74cf27c3","modified":1715669101219},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1715669101219},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b139224ff2cc668f4d95bde184934833e05b29df","modified":1715669101219},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1715669101229},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1715669101279},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1715669101229},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1715669101229},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1715669101229},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"188c1dd5d7dbc566cac00946da86aa76fff1c682","modified":1715669101229},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1715669101279},{"_id":"themes/next/source/images/cat1.jpg","hash":"f251d159d88c3db90db9be0c3c474433ac51f713","modified":1696691043971},{"_id":"themes/next/source/js/bookmark.js","hash":"e2fd71f2876531f4c8bf1f38828aae35dd82cca4","modified":1715669101279},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1715669101279},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1715669101279},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1715669101279},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"5a81f1c5d66561b3bcb05dae48148088a3fb5c79","modified":1715669101279},{"_id":"themes/next/source/images/favicon.ico","hash":"fe2f6c4f4585152e221759ef35a725f8b879cbcd","modified":1715238358931},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1715669101279},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1715669101289},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1715669101289},{"_id":"themes/next/source/js/motion.js","hash":"40442746ab45600b59c94c716e30eab9ba912734","modified":1715669101289},{"_id":"themes/next/source/js/next-boot.js","hash":"67256d0b4e4f8277bef8fd5b05d2443d945cb008","modified":1715669101289},{"_id":"themes/next/source/js/pjax.js","hash":"c7802d0e721197eb854f0cd9b83f1f9dad247786","modified":1715669101289},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1715669101289},{"_id":"themes/next/source/js/sidebar.js","hash":"f3052996408a09233ffaf8d631fd930443ccd781","modified":1715669101289},{"_id":"themes/next/source/js/utils.js","hash":"ca8e963f81d579319e6ba2a188f8c4a633493b92","modified":1715669101309},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1715669101309},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1715669101309},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1715669101309},{"_id":"themes/next/test/helpers/next-url.js","hash":"557d2c819184620e5ca65cb0a140a4cf7f7aeb9e","modified":1715669101309},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1715669101309},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1715669101309},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1715669101309},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1715669101309},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1715669101309},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1715669101309},{"_id":"themes/next/test/tags/mermaid.js","hash":"4d56e937497f6c1095a5e264a64243ef203f2b5a","modified":1715669101309},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1715669101309},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1715669101309},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1715669101309},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1715669101309},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1715669101159},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1715669101309},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1715669101159},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1715669101159},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1715669101159},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1715669101159},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1715669101169},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1715669101159},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1715669101169},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1715669101159},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1715669101169},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1715669101169},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1715669101169},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"22c922214982c4bb78ea92fa2ff1de93d98216a3","modified":1715669101169},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1715669101169},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1715669101169},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1715669101169},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"8a6414987474592e82b3e57eeb0bd526ae42d235","modified":1715669101169},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"10145ae7ef87b502d20bfa08beb2b899228f1419","modified":1715669101169},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1715669101169},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1715669101179},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"8d76300e31178e790400a37adfaf9bc0e5f8fae7","modified":1715669101169},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1715669101179},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1715669101179},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1715669101189},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"c8b8c10dcf5c4ffa4a8aec5ba5892842ec204ac0","modified":1715669101179},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1715669101179},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1715669101189},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1715669101189},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1715669101189},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1715669101189},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1715669101189},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1715669101189},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1715669101189},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1715669101189},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1715669101189},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"599f3f5e4385501d0010edc02ed9ca547d2467f7","modified":1715669101189},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1715669101189},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1715669101189},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1715669101199},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1715669101199},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1715669101199},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1715669101199},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"baec18165d767094ecb2dda7141ca3bd8c6f2eb9","modified":1715669101199},{"_id":"themes/next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1715669101199},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"df360f546d59b1fee8926806268754433dfa5de7","modified":1715669101209},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1715669101209},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"af3e7066a7a8d87448aadde3bc9c848077aae418","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1715669101209},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"da22c6008fc8d214ba8561b412233380a06c40f9","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1715669101209},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1715669101209},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1715669101209},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1715669101279},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"54c52744898eb5d2073b83f98bb1a61759da92dc","modified":1715669101279},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"9cd228d5de7c2e49a231be072c9ef13af2dd95ff","modified":1715669101279},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c42a1685b29650e0ab078a496b2bfe0a4483f922","modified":1715669101279},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a8fb90f7a2973bf133c2bff50579c322d1fbd790","modified":1715669101279},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5cff12a5c9fc55a68f0f57a291494cd738301ba4","modified":1715669101289},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"e3022c2ea60409a82a3e2a0d3615e4a25c684551","modified":1715669101299},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1715669101299},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1715669101299},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"f882924c7b99afc23106e39164516888b2972c7b","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"db9e807cc8531ee0052f7cdf6a4cb92a8add3fd2","modified":1715669101249},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1715669101249},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1715669101249},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1715669101249},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"b9322d644b2090d793521555646673322f2dd5e8","modified":1715669101259},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"2f19fe2aba8f63fc99641e50bcb96cc9a4feb8a4","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"e6e8892fccb02bff163d9b574984e0440a00d756","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b26770e09de9b51c851bb90fae19b27860e7fc9f","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2fb4b3f88e34a8544436a05634690217f9483419","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e728caca94567b4d4215402d01e449e23969e7e1","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"0bf248d61593fbcdfd83b018b92199f4da3699b1","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"be9d0e9493802c22f16a0645a59d0c2b556c1c3c","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"36438f7b47d7ebd250a25f97c743fda484283046","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"3ab87229f9a8357446f77f05a0c6854fb5363fd5","modified":1715669101269},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"daabc99dff5f0fa3d02e2f9d669f528544823160","modified":1715669101279},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"84567000b5f4ac8a5c035fe982f4e3510d8a74b2","modified":1715669101279},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1715669101279},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1715669101279},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1715669101289},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"27a27de3d4e0d33e9c647f7ae78e1dd6d36d2463","modified":1715669101289},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1715669101289},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1715669101289},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1715669101289},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1715669101289},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1715669101289},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1715669101289},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1715669101299},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1715669101289},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1715669101299},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1715669101299},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1715669101299},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1715669101299},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"696bdf9afc54246c26b8f8d87fc0746ec49b2ba5","modified":1715669101299},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1715669101299},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"f57bcb69a6a306adf7af416f23c270007f872064","modified":1715669101299},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1715669101299},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1715669101299},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"6ce7a068192a7ca3487eb40645f2fdebc04ce89e","modified":1715669101299},{"_id":"themes/next/source/images/cat2.jpg","hash":"8d684a3f8b2b7a1fa2da3fb28631d41b93a0bb98","modified":1696691041722},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1715669101299},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1715669101229},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"9cafc8f751581d496f1f3c056b95f3b8e1ebbf4e","modified":1715669101299},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"f9fe39bef5fb2565abbffcb26390868c13d18359","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"c524d5990a8e7ed9caf17978cf372bb0646f7b9f","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"6d8827b14ea1af16bfa21e194006ba9fa10ce50b","modified":1715669101229},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d514d09525256d510c83829aa6895bb40678d576","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"6ad0da4a5585508abbe78342a680607face98e19","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a698c3adba896a46e26850967cb73295c521940","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"8a7b70ef14c7110aaceb30ea2f7eb4b202f0f0cd","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"8525ba52332fc3c276ec03de7bf290e4dec54558","modified":1715669101239},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"f4de9eb94bebdf7790522e103de51205a64cae9e","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1715669101239},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"137c9a41ed0f2c92f0913732090ae154cf596f74","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"63fb6d36d9ea62c7e39274c666e102b12f64ff77","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"f8a97aad14e0b16b555ee0048da5402f818f9693","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"f5c1a6afcd2d460ccd5987ef1af747fc99d3ea72","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1715669101249},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"794eabec62d6070255fa10516487cff70e0030bf","modified":1715669101249},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"98a233884b1953952b8364895617fe53def60038","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"41c0516f76513036e30a70509a6d33e8a79bdba2","modified":1715669101259},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1715669101249},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"333f48b1107c63e992fdbe1290eeb2a7cc1d7a0c","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"1772ade171aa6bd806909d69003cfc498c3af019","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"3324e9d09faf3903bc9815358bda4000bbb691fa","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"2f4c791b5999b2e1a707bd473c1db7c21d206a27","modified":1715669101259},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"ed76879122ad1b62d210522de4037808644a590d","modified":1715669101259},{"_id":"public/about/index.html","hash":"6d650c43d03134740b3eaa28d85872db77250222","modified":1715689313491},{"_id":"public/categories/index.html","hash":"a1a40135f4a3e553fe1f703fefac816bb691bddd","modified":1715689313491},{"_id":"public/tags/index.html","hash":"122788ffe80f6e4ed95a0e0a2dfe3daa2d8d0011","modified":1715689313491},{"_id":"public/2024/05/13/java两锁之一的ReetrantLock/index.html","hash":"f10a822d1e073d02b2b25b7a617f5eb34fadcf0e","modified":1715689313491},{"_id":"public/2024/05/08/java两锁之一的synchronized/index.html","hash":"b40ea4a08bdd210aeafeb9ccc79918fe94b76acd","modified":1715689313491},{"_id":"public/2024/04/30/ThreadLocal小结/index.html","hash":"5b59a52fb6167fa75cc4c3b51efbf2d8d690c272","modified":1715689313491},{"_id":"public/2024/04/22/Spring自动装配原理/index.html","hash":"c99d8afb295ab6144566a46df035550afa03e31e","modified":1715689313491},{"_id":"public/archives/index.html","hash":"7eaf79e508d508b6246e573a0c863a3bfaa8e43a","modified":1715689313491},{"_id":"public/archives/2024/index.html","hash":"f682cd600d8af603809710620533131fd6027efb","modified":1715689313491},{"_id":"public/archives/2024/04/index.html","hash":"5e02d6b84603b88487c6a55f5a90172bb8c685a2","modified":1715689313491},{"_id":"public/archives/2024/05/index.html","hash":"e9d49b8a1b23a3bc3c3c4d7c15c2415c8aa135b3","modified":1715689313491},{"_id":"public/categories/后端开发/index.html","hash":"1fcd431c1be95eeeae5db70f1bfc1e2d2bb64910","modified":1715689313491},{"_id":"public/index.html","hash":"d487b0b29a803c177c852aa794692b503d86aa86","modified":1715689313491},{"_id":"public/tags/Spring/index.html","hash":"656921a18c0a2f52b77cddbfdbacba022fad02ad","modified":1715689313491},{"_id":"public/tags/juc/index.html","hash":"c53c57f11ecb41c7a62e657248682074c3959668","modified":1715689313491},{"_id":"public/tags/java锁/index.html","hash":"62b1038ef6c056c3add3b0319d41e41cff9e143c","modified":1715689313491},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1715689313491},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1715689313491},{"_id":"public/images/cat1.jpg","hash":"f251d159d88c3db90db9be0c3c474433ac51f713","modified":1715689313491},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1715689313491},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1715689313491},{"_id":"public/images/cat2.jpg","hash":"8d684a3f8b2b7a1fa2da3fb28631d41b93a0bb98","modified":1715689313491},{"_id":"public/images/favicon.ico","hash":"fe2f6c4f4585152e221759ef35a725f8b879cbcd","modified":1715689313491},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"5a81f1c5d66561b3bcb05dae48148088a3fb5c79","modified":1715689313491},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1715689313491},{"_id":"public/2024/04/22/Spring自动装配原理/模块装配二.png","hash":"2cf88ddbf269d9fdb41df66ff1c8d9df7805b5e6","modified":1715689313491},{"_id":"public/2024/05/08/java两锁之一的synchronized/image-20240513145730228.png","hash":"69b8f94715243e31b3df1c58a974175093bf3bc5","modified":1715689313491},{"_id":"public/2024/04/22/Spring自动装配原理/模块装配方式一.png","hash":"b7d05a1fbead943ab6c17fc8cee78335085cf869","modified":1715689313491},{"_id":"public/2024/05/08/java两锁之一的synchronized/image-20240513150908609.png","hash":"e5a9c4fd8c08519d5f19713f7ed65a85117c4f1c","modified":1715689313491},{"_id":"public/2024/05/08/java两锁之一的synchronized/java重量级锁.webp","hash":"011b924544ca2bfea4a42539b71545a40f2b5da1","modified":1715689313491},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1715689313491},{"_id":"public/css/main.css","hash":"885d8ffce72bcd3752a150b2ad423cb5ddf9ed10","modified":1715689313491},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1715689313491},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1715689313491},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1715689313491},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1715689313491},{"_id":"public/js/motion.js","hash":"3864e56a829b698b98ec8d93b8916271ba6fd015","modified":1715689313491},{"_id":"public/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1715689313491},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1715689313491},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1715689313491},{"_id":"public/js/utils.js","hash":"b2c0fd95770e58c25c9f99e1d66fe0e625e3cdab","modified":1715689313491},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1715689313491},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1715689313491},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1715689313491},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1715689313491},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1715689313491},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1715689313491},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1715689313491},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1715689313491},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1715689313491},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1715689313491},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1715689313491},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1715689313491},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1715689313491},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1715689313491},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1715689313491},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1715689313491},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1715689313491},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1715689313491},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1715689313491},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1715689313491},{"_id":"public/js/third-party/search/algolia-search.js","hash":"35401af771f43dc633dd99a92ebf5295cd0b158a","modified":1715689313491},{"_id":"public/js/third-party/search/local-search.js","hash":"81a24bd19554b5bd148975026db64338d8710774","modified":1715689313491},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1715689313491},{"_id":"public/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1715689313491},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1715689313491},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1715689313491},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1715689313491},{"_id":"public/2024/05/08/java两锁之一的synchronized/jvm_markWord.png","hash":"7db0b5805349a77b68e50f3403fc764027782733","modified":1715689313491}],"Category":[{"name":"计算机基础","_id":"clw6d4bah0004psuserji1a6f"},{"name":"redis","_id":"clw6d4bal000apsus94cr2jxc"},{"name":"后端开发","_id":"clw6d4bam000fpsush8l5c8me"}],"Data":[],"Page":[{"title":"About","date":"2024-04-16T06:02:23.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2024-04-16 14:02:23\n---\n","updated":"2024-05-14T12:11:57.905Z","path":"about/index.html","comments":1,"layout":"page","_id":"clw6d4ba70000psusgccl9rhn","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Categories","date":"2024-04-16T06:02:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2024-04-16 14:02:47\ntype: \"categories\"\n---\n","updated":"2024-05-14T12:11:42.191Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clw6d4bag0002psusdp3a46of","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Tags","date":"2024-04-16T06:02:37.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2024-04-16 14:02:37\ntype: \"tags\"\n---\n\n","updated":"2024-05-14T12:13:16.357Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clw6d4bai0006psus5tkl5dd6","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"什么是HTTPS?","date":"2024-04-22T13:22:13.000Z","_content":"\n# 1. HTTPS概述\n\nHTTPS相较于HTTP多了一个安全层，也就是`HTTPS ≈ HTTP + SSL/TLS`。\n\nSSL（Secure Sockets Layer）安全套接层，TSL（Transport Secure Layer）传输层安全协议，可以看做SSL的高版本。\n\n## 1.1 HTTPS要干的事\n\nHTTPS要实现的功能主要有三个（先整体看一下，下面具体说）\n\n1. **机密性**：防止被别人截取到重要信息。使用混合加密\n\n2. **报文完整性**：防止通信信息被恶意篡改。使用hash算法，信息是`m`传输`m+H(m)`\n3. **端点鉴别**：校验客户端和服务端的身份（防止中间人攻击）。使用CA证书\n\n# 2. 机密性\n\n加密主要有两大类，分别是**对称加密**和**非对称加密**\n\n**场景**：Alice和Bob要进行通信，以及旁观的Trudy\n\n## 2.1 对称加密\n\n**Alice**向**Bob**说`bob,i love you.alice`，由于说的是明文，在一旁的**Trudy**也可以听到。\n\n**Alice**和**Bob**也发现了这一点，于是他们就想出了一个简单的办法，将要传达的信息通过一下**规则R**转变后再发送\n\n**规则R**：\n\n```\n明文字母: a b c d e f g h i j k l m n o p q r s t u v w x y z\n密文字母: m n b v c x z a s d f g h j k l p o i u y t r e w q\n```\n\n这样`bob,i love you.alice`就变成了`nkn, s gktc wky.mgsbc`。**Bob**在接收到信息后再根据**规则R**解密，获得真正的信息。\n\n这样**Trudy**就会听的一脸懵，你们在说啥？不过聪明的`Trudy`每天听他们交流，统计了所有词的出现频率，根据他们平时交流用的词汇数量（比如**bob**和**nkn**出现次数差不多，就推测`b=n,o=k`）推出了他们交流使用的**规则R**，这样他们交流的内容就被**Trudy**破解了(这种暴力破解方式遇到比较复杂的加密方式就很难破解了，场景省略100字)。\n\n另外，**Trudy**还有可能偷听到**Alice**与**Bob**协商的规则R，这样Trudy甚至不需要时间推算就可以获取加密信息。\n\n## 2.2 非对称加密\n\n不久后，Alice和Bob也知道了这一方法的不妥，他们殚精竭虑又想出了一个新的办法，非对称加密（以RSA算法为例）。\n\n(RSA算法是基于数学模运算实现的，本质是两种运算算力的不对等，感兴趣的自行查阅)\n\nBob持有RSA算法的私钥，然后Bob将公钥告诉Alice。之后Alice就可以用公钥将信息加密然后发送给Bob，Bob将得到的信息用自己的私钥解密就可以得出真正的信息。\n\n**问题**：\n\n1. 这种Trudy可能不知道Alice向Bob说了什么但是还是可以篡改Alice向Bob发送的信息，这样Bob也不知道Alice在说啥了。\n\n2. Trudy也可以知道Bob告诉Alice的公钥，然后假装自己是Alice向Bob发送`bob,i hate you.alice`，Bob就有可能误会Alice。\n\n# 3. 报文完整性\n\n为了防止Trudy篡改消息，Alice将要发出的消息，用进行以下处理：\n\n原消息为**message**，处理后的消息为**message + hashCode(message)**，将`hashCode(message)`作为校验码，由于两个大片内容的散列函数值几乎不可能相同，所以Bob只需要将**message的hashcode值**与**校验码**进行比较就可以确定信息是否被篡改过。\n\n但是问题又来了？万一校验码也一起被替换了怎么办？\n\n于是Alice和Bob又商量了一个新的加密方式。假设要发送的消息为`m`，两人协商一个**鉴别密钥s**，将校验码变为`h(m+s)`，信息还是`m`，这样Bob收到后，就可以将**信息`m`加上密钥`s`拼接**在一起计算**hashCode**与**校验码**比较。\n\n问题又又又来了，Alice和Bob怎么保证**鉴别密钥s**只有他们两个知道呢？\n\n# 4. 端点鉴别\n\n为了防止Trudy假装成Alice，Bob需要鉴别谁是真正的Alice。\n\nHTTPS中使用将公钥和信息发送方（Alice）绑定的方式来保证数据一定是由Alice发送的，具体是通过认证中心（Certification Authority，CA）来完成的。\n\n**CA认证过程**：Alice和Bob通信时，Alice需要获得Bob的公钥。现在不直接将Bob的公钥发给Alice，而是先通过一个第三方的机构（CA）来将Bob公钥加上一些信息生成为一个证书，\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_drafts/什么是HTTPS.md","raw":"---\ntitle: 什么是HTTPS?\ndate: 2024-04-22 21:22:13\ncategories: 计算机基础\ntags: 计算机网络\n---\n\n# 1. HTTPS概述\n\nHTTPS相较于HTTP多了一个安全层，也就是`HTTPS ≈ HTTP + SSL/TLS`。\n\nSSL（Secure Sockets Layer）安全套接层，TSL（Transport Secure Layer）传输层安全协议，可以看做SSL的高版本。\n\n## 1.1 HTTPS要干的事\n\nHTTPS要实现的功能主要有三个（先整体看一下，下面具体说）\n\n1. **机密性**：防止被别人截取到重要信息。使用混合加密\n\n2. **报文完整性**：防止通信信息被恶意篡改。使用hash算法，信息是`m`传输`m+H(m)`\n3. **端点鉴别**：校验客户端和服务端的身份（防止中间人攻击）。使用CA证书\n\n# 2. 机密性\n\n加密主要有两大类，分别是**对称加密**和**非对称加密**\n\n**场景**：Alice和Bob要进行通信，以及旁观的Trudy\n\n## 2.1 对称加密\n\n**Alice**向**Bob**说`bob,i love you.alice`，由于说的是明文，在一旁的**Trudy**也可以听到。\n\n**Alice**和**Bob**也发现了这一点，于是他们就想出了一个简单的办法，将要传达的信息通过一下**规则R**转变后再发送\n\n**规则R**：\n\n```\n明文字母: a b c d e f g h i j k l m n o p q r s t u v w x y z\n密文字母: m n b v c x z a s d f g h j k l p o i u y t r e w q\n```\n\n这样`bob,i love you.alice`就变成了`nkn, s gktc wky.mgsbc`。**Bob**在接收到信息后再根据**规则R**解密，获得真正的信息。\n\n这样**Trudy**就会听的一脸懵，你们在说啥？不过聪明的`Trudy`每天听他们交流，统计了所有词的出现频率，根据他们平时交流用的词汇数量（比如**bob**和**nkn**出现次数差不多，就推测`b=n,o=k`）推出了他们交流使用的**规则R**，这样他们交流的内容就被**Trudy**破解了(这种暴力破解方式遇到比较复杂的加密方式就很难破解了，场景省略100字)。\n\n另外，**Trudy**还有可能偷听到**Alice**与**Bob**协商的规则R，这样Trudy甚至不需要时间推算就可以获取加密信息。\n\n## 2.2 非对称加密\n\n不久后，Alice和Bob也知道了这一方法的不妥，他们殚精竭虑又想出了一个新的办法，非对称加密（以RSA算法为例）。\n\n(RSA算法是基于数学模运算实现的，本质是两种运算算力的不对等，感兴趣的自行查阅)\n\nBob持有RSA算法的私钥，然后Bob将公钥告诉Alice。之后Alice就可以用公钥将信息加密然后发送给Bob，Bob将得到的信息用自己的私钥解密就可以得出真正的信息。\n\n**问题**：\n\n1. 这种Trudy可能不知道Alice向Bob说了什么但是还是可以篡改Alice向Bob发送的信息，这样Bob也不知道Alice在说啥了。\n\n2. Trudy也可以知道Bob告诉Alice的公钥，然后假装自己是Alice向Bob发送`bob,i hate you.alice`，Bob就有可能误会Alice。\n\n# 3. 报文完整性\n\n为了防止Trudy篡改消息，Alice将要发出的消息，用进行以下处理：\n\n原消息为**message**，处理后的消息为**message + hashCode(message)**，将`hashCode(message)`作为校验码，由于两个大片内容的散列函数值几乎不可能相同，所以Bob只需要将**message的hashcode值**与**校验码**进行比较就可以确定信息是否被篡改过。\n\n但是问题又来了？万一校验码也一起被替换了怎么办？\n\n于是Alice和Bob又商量了一个新的加密方式。假设要发送的消息为`m`，两人协商一个**鉴别密钥s**，将校验码变为`h(m+s)`，信息还是`m`，这样Bob收到后，就可以将**信息`m`加上密钥`s`拼接**在一起计算**hashCode**与**校验码**比较。\n\n问题又又又来了，Alice和Bob怎么保证**鉴别密钥s**只有他们两个知道呢？\n\n# 4. 端点鉴别\n\n为了防止Trudy假装成Alice，Bob需要鉴别谁是真正的Alice。\n\nHTTPS中使用将公钥和信息发送方（Alice）绑定的方式来保证数据一定是由Alice发送的，具体是通过认证中心（Certification Authority，CA）来完成的。\n\n**CA认证过程**：Alice和Bob通信时，Alice需要获得Bob的公钥。现在不直接将Bob的公钥发给Alice，而是先通过一个第三方的机构（CA）来将Bob公钥加上一些信息生成为一个证书，\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"什么是HTTPS","published":0,"updated":"2024-05-04T13:02:32.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw6d4bad0001psusc3rf1kwf","content":"<h1 id=\"1-HTTPS概述\"><a href=\"#1-HTTPS概述\" class=\"headerlink\" title=\"1. HTTPS概述\"></a>1. HTTPS概述</h1><p>HTTPS相较于HTTP多了一个安全层，也就是<code>HTTPS ≈ HTTP + SSL/TLS</code>。</p>\n<p>SSL（Secure Sockets Layer）安全套接层，TSL（Transport Secure Layer）传输层安全协议，可以看做SSL的高版本。</p>\n<h2 id=\"1-1-HTTPS要干的事\"><a href=\"#1-1-HTTPS要干的事\" class=\"headerlink\" title=\"1.1 HTTPS要干的事\"></a>1.1 HTTPS要干的事</h2><p>HTTPS要实现的功能主要有三个（先整体看一下，下面具体说）</p>\n<ol>\n<li><p><strong>机密性</strong>：防止被别人截取到重要信息。使用混合加密</p>\n</li>\n<li><p><strong>报文完整性</strong>：防止通信信息被恶意篡改。使用hash算法，信息是<code>m</code>传输<code>m+H(m)</code></p>\n</li>\n<li><p><strong>端点鉴别</strong>：校验客户端和服务端的身份（防止中间人攻击）。使用CA证书</p>\n</li>\n</ol>\n<h1 id=\"2-机密性\"><a href=\"#2-机密性\" class=\"headerlink\" title=\"2. 机密性\"></a>2. 机密性</h1><p>加密主要有两大类，分别是<strong>对称加密</strong>和<strong>非对称加密</strong></p>\n<p><strong>场景</strong>：Alice和Bob要进行通信，以及旁观的Trudy</p>\n<h2 id=\"2-1-对称加密\"><a href=\"#2-1-对称加密\" class=\"headerlink\" title=\"2.1 对称加密\"></a>2.1 对称加密</h2><p><strong>Alice</strong>向<strong>Bob</strong>说<code>bob,i love you.alice</code>，由于说的是明文，在一旁的<strong>Trudy</strong>也可以听到。</p>\n<p><strong>Alice</strong>和<strong>Bob</strong>也发现了这一点，于是他们就想出了一个简单的办法，将要传达的信息通过一下<strong>规则R</strong>转变后再发送</p>\n<p><strong>规则R</strong>：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文字母: <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">c</span> <span class=\"selector-tag\">d</span> <span class=\"selector-tag\">e</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">g</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">i</span> <span class=\"selector-tag\">j</span> <span class=\"selector-tag\">k</span> <span class=\"selector-tag\">l</span> <span class=\"selector-tag\">m</span> <span class=\"selector-tag\">n</span> <span class=\"selector-tag\">o</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">q</span> <span class=\"selector-tag\">r</span> <span class=\"selector-tag\">s</span> <span class=\"selector-tag\">t</span> <span class=\"selector-tag\">u</span> <span class=\"selector-tag\">v</span> <span class=\"selector-tag\">w</span> <span class=\"selector-tag\">x</span> <span class=\"selector-tag\">y</span> <span class=\"selector-tag\">z</span></span><br><span class=\"line\">密文字母: <span class=\"selector-tag\">m</span> <span class=\"selector-tag\">n</span> <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">v</span> <span class=\"selector-tag\">c</span> <span class=\"selector-tag\">x</span> <span class=\"selector-tag\">z</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">s</span> <span class=\"selector-tag\">d</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">g</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">j</span> <span class=\"selector-tag\">k</span> <span class=\"selector-tag\">l</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">o</span> <span class=\"selector-tag\">i</span> <span class=\"selector-tag\">u</span> <span class=\"selector-tag\">y</span> <span class=\"selector-tag\">t</span> <span class=\"selector-tag\">r</span> <span class=\"selector-tag\">e</span> <span class=\"selector-tag\">w</span> <span class=\"selector-tag\">q</span></span><br></pre></td></tr></table></figure>\n\n<p>这样<code>bob,i love you.alice</code>就变成了<code>nkn, s gktc wky.mgsbc</code>。<strong>Bob</strong>在接收到信息后再根据<strong>规则R</strong>解密，获得真正的信息。</p>\n<p>这样<strong>Trudy</strong>就会听的一脸懵，你们在说啥？不过聪明的<code>Trudy</code>每天听他们交流，统计了所有词的出现频率，根据他们平时交流用的词汇数量（比如<strong>bob</strong>和<strong>nkn</strong>出现次数差不多，就推测<code>b=n,o=k</code>）推出了他们交流使用的<strong>规则R</strong>，这样他们交流的内容就被<strong>Trudy</strong>破解了(这种暴力破解方式遇到比较复杂的加密方式就很难破解了，场景省略100字)。</p>\n<p>另外，<strong>Trudy</strong>还有可能偷听到<strong>Alice</strong>与<strong>Bob</strong>协商的规则R，这样Trudy甚至不需要时间推算就可以获取加密信息。</p>\n<h2 id=\"2-2-非对称加密\"><a href=\"#2-2-非对称加密\" class=\"headerlink\" title=\"2.2 非对称加密\"></a>2.2 非对称加密</h2><p>不久后，Alice和Bob也知道了这一方法的不妥，他们殚精竭虑又想出了一个新的办法，非对称加密（以RSA算法为例）。</p>\n<p>(RSA算法是基于数学模运算实现的，本质是两种运算算力的不对等，感兴趣的自行查阅)</p>\n<p>Bob持有RSA算法的私钥，然后Bob将公钥告诉Alice。之后Alice就可以用公钥将信息加密然后发送给Bob，Bob将得到的信息用自己的私钥解密就可以得出真正的信息。</p>\n<p><strong>问题</strong>：</p>\n<ol>\n<li><p>这种Trudy可能不知道Alice向Bob说了什么但是还是可以篡改Alice向Bob发送的信息，这样Bob也不知道Alice在说啥了。</p>\n</li>\n<li><p>Trudy也可以知道Bob告诉Alice的公钥，然后假装自己是Alice向Bob发送<code>bob,i hate you.alice</code>，Bob就有可能误会Alice。</p>\n</li>\n</ol>\n<h1 id=\"3-报文完整性\"><a href=\"#3-报文完整性\" class=\"headerlink\" title=\"3. 报文完整性\"></a>3. 报文完整性</h1><p>为了防止Trudy篡改消息，Alice将要发出的消息，用进行以下处理：</p>\n<p>原消息为<strong>message</strong>，处理后的消息为<strong>message + hashCode(message)<strong>，将<code>hashCode(message)</code>作为校验码，由于两个大片内容的散列函数值几乎不可能相同，所以Bob只需要将</strong>message的hashcode值</strong>与<strong>校验码</strong>进行比较就可以确定信息是否被篡改过。</p>\n<p>但是问题又来了？万一校验码也一起被替换了怎么办？</p>\n<p>于是Alice和Bob又商量了一个新的加密方式。假设要发送的消息为<code>m</code>，两人协商一个<strong>鉴别密钥s</strong>，将校验码变为<code>h(m+s)</code>，信息还是<code>m</code>，这样Bob收到后，就可以将<strong>信息<code>m</code>加上密钥<code>s</code>拼接</strong>在一起计算<strong>hashCode</strong>与<strong>校验码</strong>比较。</p>\n<p>问题又又又来了，Alice和Bob怎么保证<strong>鉴别密钥s</strong>只有他们两个知道呢？</p>\n<h1 id=\"4-端点鉴别\"><a href=\"#4-端点鉴别\" class=\"headerlink\" title=\"4. 端点鉴别\"></a>4. 端点鉴别</h1><p>为了防止Trudy假装成Alice，Bob需要鉴别谁是真正的Alice。</p>\n<p>HTTPS中使用将公钥和信息发送方（Alice）绑定的方式来保证数据一定是由Alice发送的，具体是通过认证中心（Certification Authority，CA）来完成的。</p>\n<p><strong>CA认证过程</strong>：Alice和Bob通信时，Alice需要获得Bob的公钥。现在不直接将Bob的公钥发给Alice，而是先通过一个第三方的机构（CA）来将Bob公钥加上一些信息生成为一个证书，</p>\n","site":{"data":{}},"length":1160,"excerpt":"","more":"<h1 id=\"1-HTTPS概述\"><a href=\"#1-HTTPS概述\" class=\"headerlink\" title=\"1. HTTPS概述\"></a>1. HTTPS概述</h1><p>HTTPS相较于HTTP多了一个安全层，也就是<code>HTTPS ≈ HTTP + SSL/TLS</code>。</p>\n<p>SSL（Secure Sockets Layer）安全套接层，TSL（Transport Secure Layer）传输层安全协议，可以看做SSL的高版本。</p>\n<h2 id=\"1-1-HTTPS要干的事\"><a href=\"#1-1-HTTPS要干的事\" class=\"headerlink\" title=\"1.1 HTTPS要干的事\"></a>1.1 HTTPS要干的事</h2><p>HTTPS要实现的功能主要有三个（先整体看一下，下面具体说）</p>\n<ol>\n<li><p><strong>机密性</strong>：防止被别人截取到重要信息。使用混合加密</p>\n</li>\n<li><p><strong>报文完整性</strong>：防止通信信息被恶意篡改。使用hash算法，信息是<code>m</code>传输<code>m+H(m)</code></p>\n</li>\n<li><p><strong>端点鉴别</strong>：校验客户端和服务端的身份（防止中间人攻击）。使用CA证书</p>\n</li>\n</ol>\n<h1 id=\"2-机密性\"><a href=\"#2-机密性\" class=\"headerlink\" title=\"2. 机密性\"></a>2. 机密性</h1><p>加密主要有两大类，分别是<strong>对称加密</strong>和<strong>非对称加密</strong></p>\n<p><strong>场景</strong>：Alice和Bob要进行通信，以及旁观的Trudy</p>\n<h2 id=\"2-1-对称加密\"><a href=\"#2-1-对称加密\" class=\"headerlink\" title=\"2.1 对称加密\"></a>2.1 对称加密</h2><p><strong>Alice</strong>向<strong>Bob</strong>说<code>bob,i love you.alice</code>，由于说的是明文，在一旁的<strong>Trudy</strong>也可以听到。</p>\n<p><strong>Alice</strong>和<strong>Bob</strong>也发现了这一点，于是他们就想出了一个简单的办法，将要传达的信息通过一下<strong>规则R</strong>转变后再发送</p>\n<p><strong>规则R</strong>：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文字母: <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">c</span> <span class=\"selector-tag\">d</span> <span class=\"selector-tag\">e</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">g</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">i</span> <span class=\"selector-tag\">j</span> <span class=\"selector-tag\">k</span> <span class=\"selector-tag\">l</span> <span class=\"selector-tag\">m</span> <span class=\"selector-tag\">n</span> <span class=\"selector-tag\">o</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">q</span> <span class=\"selector-tag\">r</span> <span class=\"selector-tag\">s</span> <span class=\"selector-tag\">t</span> <span class=\"selector-tag\">u</span> <span class=\"selector-tag\">v</span> <span class=\"selector-tag\">w</span> <span class=\"selector-tag\">x</span> <span class=\"selector-tag\">y</span> <span class=\"selector-tag\">z</span></span><br><span class=\"line\">密文字母: <span class=\"selector-tag\">m</span> <span class=\"selector-tag\">n</span> <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">v</span> <span class=\"selector-tag\">c</span> <span class=\"selector-tag\">x</span> <span class=\"selector-tag\">z</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">s</span> <span class=\"selector-tag\">d</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">g</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">j</span> <span class=\"selector-tag\">k</span> <span class=\"selector-tag\">l</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">o</span> <span class=\"selector-tag\">i</span> <span class=\"selector-tag\">u</span> <span class=\"selector-tag\">y</span> <span class=\"selector-tag\">t</span> <span class=\"selector-tag\">r</span> <span class=\"selector-tag\">e</span> <span class=\"selector-tag\">w</span> <span class=\"selector-tag\">q</span></span><br></pre></td></tr></table></figure>\n\n<p>这样<code>bob,i love you.alice</code>就变成了<code>nkn, s gktc wky.mgsbc</code>。<strong>Bob</strong>在接收到信息后再根据<strong>规则R</strong>解密，获得真正的信息。</p>\n<p>这样<strong>Trudy</strong>就会听的一脸懵，你们在说啥？不过聪明的<code>Trudy</code>每天听他们交流，统计了所有词的出现频率，根据他们平时交流用的词汇数量（比如<strong>bob</strong>和<strong>nkn</strong>出现次数差不多，就推测<code>b=n,o=k</code>）推出了他们交流使用的<strong>规则R</strong>，这样他们交流的内容就被<strong>Trudy</strong>破解了(这种暴力破解方式遇到比较复杂的加密方式就很难破解了，场景省略100字)。</p>\n<p>另外，<strong>Trudy</strong>还有可能偷听到<strong>Alice</strong>与<strong>Bob</strong>协商的规则R，这样Trudy甚至不需要时间推算就可以获取加密信息。</p>\n<h2 id=\"2-2-非对称加密\"><a href=\"#2-2-非对称加密\" class=\"headerlink\" title=\"2.2 非对称加密\"></a>2.2 非对称加密</h2><p>不久后，Alice和Bob也知道了这一方法的不妥，他们殚精竭虑又想出了一个新的办法，非对称加密（以RSA算法为例）。</p>\n<p>(RSA算法是基于数学模运算实现的，本质是两种运算算力的不对等，感兴趣的自行查阅)</p>\n<p>Bob持有RSA算法的私钥，然后Bob将公钥告诉Alice。之后Alice就可以用公钥将信息加密然后发送给Bob，Bob将得到的信息用自己的私钥解密就可以得出真正的信息。</p>\n<p><strong>问题</strong>：</p>\n<ol>\n<li><p>这种Trudy可能不知道Alice向Bob说了什么但是还是可以篡改Alice向Bob发送的信息，这样Bob也不知道Alice在说啥了。</p>\n</li>\n<li><p>Trudy也可以知道Bob告诉Alice的公钥，然后假装自己是Alice向Bob发送<code>bob,i hate you.alice</code>，Bob就有可能误会Alice。</p>\n</li>\n</ol>\n<h1 id=\"3-报文完整性\"><a href=\"#3-报文完整性\" class=\"headerlink\" title=\"3. 报文完整性\"></a>3. 报文完整性</h1><p>为了防止Trudy篡改消息，Alice将要发出的消息，用进行以下处理：</p>\n<p>原消息为<strong>message</strong>，处理后的消息为<strong>message + hashCode(message)<strong>，将<code>hashCode(message)</code>作为校验码，由于两个大片内容的散列函数值几乎不可能相同，所以Bob只需要将</strong>message的hashcode值</strong>与<strong>校验码</strong>进行比较就可以确定信息是否被篡改过。</p>\n<p>但是问题又来了？万一校验码也一起被替换了怎么办？</p>\n<p>于是Alice和Bob又商量了一个新的加密方式。假设要发送的消息为<code>m</code>，两人协商一个<strong>鉴别密钥s</strong>，将校验码变为<code>h(m+s)</code>，信息还是<code>m</code>，这样Bob收到后，就可以将<strong>信息<code>m</code>加上密钥<code>s</code>拼接</strong>在一起计算<strong>hashCode</strong>与<strong>校验码</strong>比较。</p>\n<p>问题又又又来了，Alice和Bob怎么保证<strong>鉴别密钥s</strong>只有他们两个知道呢？</p>\n<h1 id=\"4-端点鉴别\"><a href=\"#4-端点鉴别\" class=\"headerlink\" title=\"4. 端点鉴别\"></a>4. 端点鉴别</h1><p>为了防止Trudy假装成Alice，Bob需要鉴别谁是真正的Alice。</p>\n<p>HTTPS中使用将公钥和信息发送方（Alice）绑定的方式来保证数据一定是由Alice发送的，具体是通过认证中心（Certification Authority，CA）来完成的。</p>\n<p><strong>CA认证过程</strong>：Alice和Bob通信时，Alice需要获得Bob的公钥。现在不直接将Bob的公钥发给Alice，而是先通过一个第三方的机构（CA）来将Bob公钥加上一些信息生成为一个证书，</p>\n"},{"title":"基于redis分布式锁的简单实现","date":"2024-04-22T13:34:21.000Z","_content":"\n# 1. 分布式锁的核心\n\n锁主要是用来解决线程安全问题\n\n引发线程安全问题的三个条件：\n\n+ 多线程环境\n+ 有共享数据\n+ 有多条语句操作共享数据/单条语句本身非原子操作\n\n在单机情况下，使用jvm支持的synchronized或者ReentrantLock就行，但是在多机JVM内存不一致的时候解决线程安全问题就需要分布式锁了（使用一块公共地方来进行数据访问的统一）\n\n# 2. 初步实现\n\n\n\n# 3. Redisson的封装\n","source":"_drafts/基于redis分布式锁的简单实现.md","raw":"---\ntitle: 基于redis分布式锁的简单实现\ndate: 2024-04-22 21:34:21\ntags: \n  - redis\n  - 分布式锁\ncategories:\n  - redis\n      \n---\n\n# 1. 分布式锁的核心\n\n锁主要是用来解决线程安全问题\n\n引发线程安全问题的三个条件：\n\n+ 多线程环境\n+ 有共享数据\n+ 有多条语句操作共享数据/单条语句本身非原子操作\n\n在单机情况下，使用jvm支持的synchronized或者ReentrantLock就行，但是在多机JVM内存不一致的时候解决线程安全问题就需要分布式锁了（使用一块公共地方来进行数据访问的统一）\n\n# 2. 初步实现\n\n\n\n# 3. Redisson的封装\n","slug":"基于redis分布式锁的简单实现","published":0,"updated":"2024-05-04T13:44:09.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw6d4bag0003psuse9ec34f7","content":"<h1 id=\"1-分布式锁的核心\"><a href=\"#1-分布式锁的核心\" class=\"headerlink\" title=\"1. 分布式锁的核心\"></a>1. 分布式锁的核心</h1><p>锁主要是用来解决线程安全问题</p>\n<p>引发线程安全问题的三个条件：</p>\n<ul>\n<li>多线程环境</li>\n<li>有共享数据</li>\n<li>有多条语句操作共享数据&#x2F;单条语句本身非原子操作</li>\n</ul>\n<p>在单机情况下，使用jvm支持的synchronized或者ReentrantLock就行，但是在多机JVM内存不一致的时候解决线程安全问题就需要分布式锁了（使用一块公共地方来进行数据访问的统一）</p>\n<h1 id=\"2-初步实现\"><a href=\"#2-初步实现\" class=\"headerlink\" title=\"2. 初步实现\"></a>2. 初步实现</h1><h1 id=\"3-Redisson的封装\"><a href=\"#3-Redisson的封装\" class=\"headerlink\" title=\"3. Redisson的封装\"></a>3. Redisson的封装</h1>","site":{"data":{}},"length":143,"excerpt":"","more":"<h1 id=\"1-分布式锁的核心\"><a href=\"#1-分布式锁的核心\" class=\"headerlink\" title=\"1. 分布式锁的核心\"></a>1. 分布式锁的核心</h1><p>锁主要是用来解决线程安全问题</p>\n<p>引发线程安全问题的三个条件：</p>\n<ul>\n<li>多线程环境</li>\n<li>有共享数据</li>\n<li>有多条语句操作共享数据&#x2F;单条语句本身非原子操作</li>\n</ul>\n<p>在单机情况下，使用jvm支持的synchronized或者ReentrantLock就行，但是在多机JVM内存不一致的时候解决线程安全问题就需要分布式锁了（使用一块公共地方来进行数据访问的统一）</p>\n<h1 id=\"2-初步实现\"><a href=\"#2-初步实现\" class=\"headerlink\" title=\"2. 初步实现\"></a>2. 初步实现</h1><h1 id=\"3-Redisson的封装\"><a href=\"#3-Redisson的封装\" class=\"headerlink\" title=\"3. Redisson的封装\"></a>3. Redisson的封装</h1>"},{"title":"SpringBoot自动装配原理","date":"2024-04-22T13:25:01.000Z","_content":"\nSpringBoot自动装配 = 模块装配 + 条件装配\n\n`@SpringBootApplication`上标注了`@EnableAutoConfiguration`，这自动装配的起点。\n\n1. 导入starter及Spring运行需要的类\n\n   - `@EnableAutoConfiguration `上标注了`@Import(AutoConfigurationImportSelector.class)`\n\n   - 根据模块装配规则`AutoConfigurationImportSelector`的父类实现了`ImportSelector`接口，重写了`selectImports()`方法。\n   - Spring内部通过层层过滤，最终委托给`SpringFactoriesLoader`中`loadFactoryNames()`方法来调用`loadSpringFactories()`，并过滤返回值key是`EnableAutoConfiguration`的value\n   - `loadSpringFactories()`方法会解析资源目录下\"META-INF/spring.factories\"文件，并将数据封装成Map类型\n   - 之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF/spring.factories文件中定义的EnableAutoConfiguration的类）\n\n2. 导入自己编写的Bean\n   - `@AutoConfigurationPackage`上标注了`@Import(AutoConfigurationPackages.Registrar.class)`\n   - 根据模块装配规则``AutoConfigurationPackages.Registrar`实现了`ImportBeanDefinitionRegistrar`接口，重写了`registerBeanDefinitions()`方法。\n   - `registerBeanDefinitions()`会调用`register()`方法来注册`PackageImports`中封装的包名\n   - `PackageImports`会解析是否配置需要扫描的包名，默认是启动类所在包\n\n<!-- more -->\n\n# 1. Spring中的装配\n\nTips：框架源码类文章建议自己打开IDEA跟着看看类之间的关系\n\n## 1.1 模块装配\n\n模块装配主要是通过`@Import`注解来实现的，听名字就知道是用来导入类的。\n\n```java\n//Spring中著名的EnableAutoConfiguration注解\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n//不是导入类吗？这导入了个什么玩意儿?\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n    Class<?>[] exclude() default {};\n\n    String[] excludeName() default {};\n}\n```\n\nImport注解源码\n\n```java\n/* @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.0\n * @see Configuration\n * @see ImportSelector\n * @see ImportBeanDefinitionRegistrar\n * @see ImportResource\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Import {\n\t/**\n\t * {@link Configuration @Configuration}, {@link ImportSelector},\n\t * {@link ImportBeanDefinitionRegistrar}, or regular component classes to import.\n\t */\n\tClass<?>[] value();\n\n}\n```\n\n很清楚的看到了四种导入方式`Configuration`，`ImportSelector`、`ImportBeanDefinitionRegistrar`、`ImportResource`\n\n### 1. ImportResource（导入普通类）\n\n需要导入的User类\n\n```java\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass User{\n    private Long id;\n    private String name;\n}\n```\n\n自定义的注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Import(User.class)\npublic @interface EnableUser {\n\n}\n```\n\n启动类\n\n```java\n@SpringBootApplication\n//标注自定义注解，也可以标注在配置类等地方\n@EnableUser\npublic class WebTestApplication {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(WebTestApplication.class, args);\n        String[] beanNamesForType = context.getBeanNamesForType(User.class);\n        System.out.println(beanNamesForType[0]);\n    }\n}\n```\n\n成功打印出了User\n\n![模块装配方式一](Spring自动装配原理/模块装配方式一.png)\n\n### 2. Configuration (导入配置类)\n\n建立配置类，将配置类放到启动类包扫描不到的地方（默认会扫描主启动类所在包下的所有类，我这里就直接放在主启动类包上）\n\n```java\n@Configuration\npublic class ImportConfiguration {\n    @Bean\n    public User getUser(){\n        User user = new User();\n        user.setId(36L);\n        user.setName(\"ruizhi\");\n        return user;\n    }\n}\n```\n\n修改注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Import(User.class)\npublic @interface EnableUser {\n\n}\n```\n\n测试，依旧可以打印出信息（具体对象注入名称问题，自行查阅）\n\n```java\n@SpringBootApplication\n@EnableUser\npublic class WebTestApplication {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(WebTestApplication.class, args);\n        String[] beanNamesForType = context.getBeanNamesForType(User.class);\n        System.out.println(beanNamesForType[0]);\n    }\n}\n```\n\n![模块装配二](Spring自动装配原理/模块装配二.png)\n\n### 3. ImportSelector（导入Selector）\n\nImportSelector接口\n\n```java\npublic interface ImportSelector {\n\n    /**\n     * Select and return the names of which class(es) should be imported based on\n     * the {@link AnnotationMetadata} of the importing @{@link Configuration} class.\n     * @return the class names, or an empty array if none\n     */\n    //返回要导入的类的全限定类名\n    String[] selectImports(AnnotationMetadata importingClassMetadata);\n}\n```\n\n自定义Selector类实现ImportSelector接口\n\n```java\npublic class UserSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata importingClassMetadata) {\n        //导入User类\n        return new String[]{User.class.getName()};\n    }\n}\n```\n\n注解更改，主启动类不需要更改\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Import(UserSelector.class)\npublic @interface EnableUser {\n\n}\n```\n\n测试结果和方式1相同\n\n### 4. ImportBeanDefinitionRegistrar（导入BeanDefinition）\n\n修改Selector类\n\n```java\npublic class UserSelector implements ImportBeanDefinitionRegistrar {\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {\n        //传入Bean id和BeanDefinition, 这里直接new了一个\n        registry.registerBeanDefinition(\"ruizhi\", new RootBeanDefinition(User.class));\n    }\n}\n```\n\n结果打印名称就是上面类注册的名称（我这打印的是\"ruizhi\")\n\n## 1.2 条件装配\n\n### 1. Conditional\n\n稍微深入了解过Spring的老哥可能就会很清楚，Spring里面有一套`@Conditional`注解，最常见的就是`@ConditionalOnMissingBean(String[] BeanName)`（没有相应Bean就注入），`@ConditionalOnClass`（有相应Class就注入），有Bean就注入、没有class就注入等一堆注解。\n\n**作用**：有了这些注解我们就可以很轻松的自定类来覆盖掉原本要自动装配的类\n\n```java\n//万恶之源，所有Conditional注解的根\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Conditional {\n\n\t/**\n\t * All {@link Condition} classes that must {@linkplain Condition#matches match}\n\t * in order for the component to be registered.\n\t */\n\tClass<? extends Condition>[] value();\n\n}\n```\n\nConditional会根据Condition来判断是否装配\n\n```java\n@FunctionalInterface\npublic interface Condition {\n\n    /**\n     * Determine if the condition matches.\n     * @param context the condition context\n     * @param metadata the metadata of the {@link org.springframework.core.type.AnnotationMetadata class}\n     * or {@link org.springframework.core.type.MethodMetadata method} being checked\n     * @return {@code true} if the condition matches and the component can be registered,\n     * or {@code false} to veto the annotated component's registration\n     */\n    //返回值为true，则注入相关Bean\n    boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata);\n}\n```\n\n到这里我们可以想到，所有衍生出的注解都是根据匹配规则实现了自己`matches()`方法。\n\n看看`ConditionalOnMissingBean`验证下想法\n\n```java\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Conditional({OnBeanCondition.class})\npublic @interface ConditionalOnMissingBean {\n    Class<?>[] value() default {};\n\n    String[] type() default {};\n\n    Class<?>[] ignored() default {};\n\n    String[] ignoredType() default {};\n\n    Class<? extends Annotation>[] annotation() default {};\n\n    String[] name() default {};\n\n    SearchStrategy search() default SearchStrategy.ALL;\n\n    Class<?>[] parameterizedContainer() default {};\n}\n\n```\n\n这时候你自信满满的打开IDEA看了下源码，在OnBeanCondition里面怎么都没找到matches()方法，只有一个 `getMatchOutcome()`？？？怎么回事？\n\n```java\n@Order(Ordered.LOWEST_PRECEDENCE)\nclass OnBeanCondition extends FilteringSpringBootCondition implements ConfigurationCondition {\n    @Override\n\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\tConditionMessage matchMessage = ConditionMessage.empty();\n\t\tMergedAnnotations annotations = metadata.getAnnotations();\n\t\tif (annotations.isPresent(ConditionalOnBean.class)) {\n\t\t\tSpec<ConditionalOnBean> spec = new Spec<>(context, metadata, annotations, ConditionalOnBean.class);\n\t\t\tMatchResult matchResult = getMatchingBeans(context, spec);\n\t\t\tif (!matchResult.isAllMatched()) {\n\t\t\t\tString reason = createOnBeanNoMatchReason(matchResult);\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().because(reason));\n\t\t\t}\n\t\t\tmatchMessage = spec.message(matchMessage).found(\"bean\", \"beans\").items(Style.QUOTE,\n\t\t\t\t\tmatchResult.getNamesOfAllMatches());\n\t\t}\n\t\tif (metadata.isAnnotated(ConditionalOnSingleCandidate.class.getName())) {\n\t\t\tSpec<ConditionalOnSingleCandidate> spec = new SingleCandidateSpec(context, metadata, annotations);\n\t\t\tMatchResult matchResult = getMatchingBeans(context, spec);\n\t\t\tif (!matchResult.isAllMatched()) {\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().didNotFind(\"any beans\").atAll());\n\t\t\t}\n\t\t\telse if (!hasSingleAutowireCandidate(context.getBeanFactory(), matchResult.getNamesOfAllMatches(),\n\t\t\t\t\tspec.getStrategy() == SearchStrategy.ALL)) {\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().didNotFind(\"a primary bean from beans\")\n\t\t\t\t\t\t.items(Style.QUOTE, matchResult.getNamesOfAllMatches()));\n\t\t\t}\n\t\t\tmatchMessage = spec.message(matchMessage).found(\"a primary bean from beans\").items(Style.QUOTE,\n\t\t\t\t\tmatchResult.getNamesOfAllMatches());\n\t\t}\n\t\tif (metadata.isAnnotated(ConditionalOnMissingBean.class.getName())) {\n\t\t\tSpec<ConditionalOnMissingBean> spec = new Spec<>(context, metadata, annotations,\n\t\t\t\t\tConditionalOnMissingBean.class);\n\t\t\tMatchResult matchResult = getMatchingBeans(context, spec);\n\t\t\tif (matchResult.isAnyMatched()) {\n\t\t\t\tString reason = createOnMissingBeanNoMatchReason(matchResult);\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().because(reason));\n\t\t\t}\n\t\t\tmatchMessage = spec.message(matchMessage).didNotFind(\"any beans\").atAll();\n\t\t}\n\t\treturn ConditionOutcome.match(matchMessage);\n\t}\n}\n```\n\n那就去看看父类吧，果然最终在`FilteringSpringBootCondition`父类`SpringBootCondition`里找到了答案\n\n可以看到Spring对`matches()`方法进行了一层的封装，在`SpringBootCondition`里`matches()`方法会调用抽象的`getMatchOutcome`(有种模版模式的感觉)，子类只需要实现`getMatchOutcome()`就行了\n\n```java\npublic abstract class SpringBootCondition implements Condition {\n\tpublic final boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\tString classOrMethodName = getClassOrMethodName(metadata);\n\t\ttry {\n\t\t\tConditionOutcome outcome = getMatchOutcome(context, metadata);\n\t\t\tlogOutcome(classOrMethodName, outcome);\n\t\t\trecordEvaluation(context, classOrMethodName, outcome);\n\t\t\treturn outcome.isMatch();\n\t\t}\n\t\tcatch (NoClassDefFoundError ex) {\n\t\t\tthrow new IllegalStateException(\"Could not evaluate condition on \" + classOrMethodName + \" due to \"\n\t\t\t\t\t+ ex.getMessage() + \" not found. Make sure your own configuration does not rely on \"\n\t\t\t\t\t+ \"that class. This can also happen if you are \"\n\t\t\t\t\t+ \"@ComponentScanning a springframework package (e.g. if you \"\n\t\t\t\t\t+ \"put a @ComponentScan in the default package by mistake)\", ex);\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthrow new IllegalStateException(\"Error processing condition on \" + getName(metadata), ex);\n\t\t}\n\t}\n}\n```\n\n### 2. Profile\n\n除了Conditional，Spring中还有`@profile`注解来根据环境来注入Bean。\n\n**Environment**（环境）:Spring会把一些信息封装到Environment对象中，比如application.properties中的内容\n\n```java\n//继承PropertyResolver来解析资源\npublic interface Environment extends PropertyResolver {\n    String[] getActiveProfiles();\n\n    String[] getDefaultProfiles();\n\n    /** @deprecated */\n    @Deprecated\n    boolean acceptsProfiles(String... var1);\n\n    boolean acceptsProfiles(Profiles var1);\n}\n```\n\n测试，别忘了把Configuration路径改回来\n\n```java\npublic class WebTestApplication {\n    public static void main(String[] args) {\n        /*需要再容器refresh()之前传入profile值，可以在启动前设置参数`-DSpring.profiles.active=ruizhi`，这里就直接new一个context了*/\n        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n        ctx.getEnvironment().setActiveProfiles(\"ruizhi\");\n        ctx.register(ImportConfiguration.class);\n        ctx.refresh();\n        String[] beanNamesForType = ctx.getBeanNamesForType(User.class);\n        System.out.println(beanNamesForType[0]);\n    }\n}\n```\n\n加上profile注解，(可以更改值，自行观察是否注入User)\n\n```java\n@Configuration\npublic class ImportConfiguration {\n\n    @Bean\n    @Profile(\"ruizhi\")\n    public User getUser(){\n        User user = new User();\n        user.setId(36L);\n        user.setName(\"ruizhi\");\n        return user;\n    }\n\n}\n```\n\n# 2. SpringBoot自动装配\n\n点开注解`@SpringBootApplication`，你会发现上面标注了一个`@EnableAutoConfiguration`（允许自动装配）\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n\n\t/**\n\t * Environment property that can be used to override when auto-configuration is\n\t * enabled.\n\t */\n\tString ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n\t/**\n\t * Exclude specific auto-configuration classes such that they will never be applied.\n\t * @return the classes to exclude\n\t */\n\tClass<?>[] exclude() default {};\n\n\t/**\n\t * Exclude specific auto-configuration class names such that they will never be\n\t * applied.\n\t * @return the class names to exclude\n\t * @since 1.3.0\n\t */\n\tString[] excludeName() default {};\n\n}\n```\n\n可以看到`EnableAutoConfiguration`导入了`AutoConfigurationImportSelector.class`，继续深入看看\n\n## 2.1 AutoConfigurationImportSelector\n\n```java\n//模块装配中导入Selector的方式\npublic class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware,\n\t\tResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n    \n          ...    \n     //只要在这个方法返回类的全限定名就行了\n\t@Override\n\tpublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn NO_IMPORTS;\n\t\t}\n         //加载自动配置类，拿到类的全限定名\n\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);\n\t\treturn StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n\t}\n            \n     protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn EMPTY_ENTRY;\n\t\t}\n\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);\n         //加载候选类\n\t\tList<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\t\tconfigurations = removeDuplicates(configurations);\n\t\tSet<String> exclusions = getExclusions(annotationMetadata, attributes);\n\t\tcheckExcludedClasses(configurations, exclusions);\n\t\tconfigurations.removeAll(exclusions);\n\t\tconfigurations = getConfigurationClassFilter().filter(configurations);\n\t\tfireAutoConfigurationImportEvents(configurations, exclusions);\n\t\treturn new AutoConfigurationEntry(configurations, exclusions);\n\t}\n            \n      protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n          //通过SpringFactoriesLoader加载类名\n\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),\n\t\t\t\tgetBeanClassLoader());\n\t\tAssert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \"\n\t\t\t\t+ \"are using a custom packaging, make sure that file is correct.\");\n\t\treturn configurations;\n\t}return configurations;\n\t}\n            \n}\n```\n\n可以看到经过层层封装，Spring把具体加载的过程委托给了**SpringFactoriesLoader**类，（终于可以到具体的加载逻辑了。\n\n```java\npublic final class SpringFactoriesLoader {\n    public static final String FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\";\n    \n\tpublic static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {\n        //factoryTypeName是EnableAutoConfiguration\n\t\tString factoryTypeName = factoryType.getName();\n        //封装成Map，返回key是EnableAutoConfiguration的类名\n\t\treturn loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());\n\t}\n\n\tprivate static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n\t\tMultiValueMap<String, String> result = cache.get(classLoader);\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\n\t\ttry {\n            //加载路径就是META-INF/spring.factories\n\t\t\tEnumeration<URL> urls = (classLoader != null ?\n\t\t\t\t\tclassLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n\t\t\t\t\tClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n\t\t\tresult = new LinkedMultiValueMap<>();\n            //遍历文件并把它放到缓存里\n\t\t\twhile (urls.hasMoreElements()) {\n\t\t\t\tURL url = urls.nextElement();\n\t\t\t\tUrlResource resource = new UrlResource(url);\n\t\t\t\tProperties properties = PropertiesLoaderUtils.loadProperties(resource);\n\t\t\t\tfor (Map.Entry<?, ?> entry : properties.entrySet()) {\n\t\t\t\t\tString factoryTypeName = ((String) entry.getKey()).trim();\n\t\t\t\t\tfor (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {\n\t\t\t\t\t\tresult.add(factoryTypeName, factoryImplementationName.trim());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcache.put(classLoader, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Unable to load factories from location [\" +\n\t\t\t\t\tFACTORIES_RESOURCE_LOCATION + \"]\", ex);\n\t\t}\n\t}\n```\n\n通过上述过程我们也就可以想到Spring加载Starter，也是加载了starter资源目录下`META-INF/spring.factories`文件，当然自定义Starter也可以通过编写这一文件将需要的Bean导入到容器中。\n\n## 2.2 @AutoConfigurationPackage\n\n先点进去看看\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import(AutoConfigurationPackages.Registrar.class)\npublic @interface AutoConfigurationPackage {\n\n\t/**\n\t * Base packages that should be registered with {@link AutoConfigurationPackages}.\n\t * <p>\n\t * Use {@link #basePackageClasses} for a type-safe alternative to String-based package\n\t * names.\n\t * @return the back package names\n\t * @since 2.3.0\n\t */\n\tString[] basePackages() default {};\n\n\t/**\n\t * Type-safe alternative to {@link #basePackages} for specifying the packages to be\n\t * registered with {@link AutoConfigurationPackages}.\n\t * <p>\n\t * Consider creating a special no-op marker class or interface in each package that\n\t * serves no purpose other than being referenced by this attribute.\n\t * @return the base package classes\n\t * @since 2.3.0\n\t */\n\tClass<?>[] basePackageClasses() default {};\n\n}\n```\n\n可以看到`AutoConfigurationPackage`上面还有一个Import注解，导入了`AutoConfigurationPackages.Registrar.class`，继续往下看看\n\n```java\n//模块装配中导入BeanDefinition的方式\nstatic class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {\n            //调用外部的register方法，AnnotationMetadata是被标注注解的类的元信息（这里主要是为了获取主类包名）\n            //关于AnnotationMetadata以及BeanDefinitionRegistry的相关信息自行查阅\n\t\t\tregister(registry, new PackageImports(metadata).getPackageNames().toArray(new String[0]));\n\t\t}\n\t\t@Override\n\t\tpublic Set<Object> determineImports(AnnotationMetadata metadata) {\n\t\t\treturn Collections.singleton(new PackageImports(metadata));\n\t\t}\n\n\t}\n```\n\n但是PackageImports是什么？点进去看看\n\n```java\nprivate static final class PackageImports {\n\n\t\tprivate final List<String> packageNames;\n\n\t\tPackageImports(AnnotationMetadata metadata) {\n\t\t\tAnnotationAttributes attributes = AnnotationAttributes\n\t\t\t\t\t.fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), false));\n\t\t\tList<String> packageNames = new ArrayList<>();\n            //判断自己有没有配置basePackages\n\t\t\tfor (String basePackage : attributes.getStringArray(\"basePackages\")) {\n\t\t\t\tpackageNames.add(basePackage);\n\t\t\t}\n\t\t\tfor (Class<?> basePackageClass : attributes.getClassArray(\"basePackageClasses\")) {\n\t\t\t\tpackageNames.add(basePackageClass.getPackage().getName());\n\t\t\t}\n            //默认空的会自动添加类的包路径\n\t\t\tif (packageNames.isEmpty()) {\n\t\t\t\tpackageNames.add(ClassUtils.getPackageName(metadata.getClassName()));\n\t\t\t}\n\t\t\tthis.packageNames = Collections.unmodifiableList(packageNames);\n\t\t}\n\t}\n```\n\n# 3. 总结\n\n`@SpringBootApplication`上标注了`@EnableAutoConfiguration`，这自动装配的起点。\n\n1. 导入starter及Spring运行需要的类\n\n   - `@EnableAutoConfiguration `上标注了`@Import(AutoConfigurationImportSelector.class)`\n\n   - 根据模块装配规则`AutoConfigurationImportSelector`的父类实现了`ImportSelector`接口，重写了`selectImports()`方法。\n   - Spring内部通过层层过滤，最终委托给`SpringFactoriesLoader`中`loadFactoryNames()`方法来调用`loadSpringFactories()`，并过滤返回值key是`EnableAutoConfiguration`的value\n   - `loadSpringFactories()`方法会解析资源目录下\"META-INF/spring.factories\"文件，并将数据封装成Map类型\n   - 之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF/spring.factories文件中定义的EnableAutoConfiguration的类）\n\n2. 导入自己编写的Bean\n   - `@AutoConfigurationPackage`上标注了`@Import(AutoConfigurationPackages.Registrar.class)`\n   - 根据模块装配规则``AutoConfigurationPackages.Registrar`实现了`ImportBeanDefinitionRegistrar`接口，重写了`registerBeanDefinitions()`方法。\n   - `registerBeanDefinitions()`会调用`register()`方法来注册`PackageImports`中封装的包名\n   - `PackageImports`会解析是否配置需要扫描的包名，默认是启动类所在包\n\n","source":"_posts/Spring自动装配原理.md","raw":"---\ntitle: SpringBoot自动装配原理\ndate: 2024-04-22 21:25:01\ntags: Spring\ncategories: 后端开发\n---\n\nSpringBoot自动装配 = 模块装配 + 条件装配\n\n`@SpringBootApplication`上标注了`@EnableAutoConfiguration`，这自动装配的起点。\n\n1. 导入starter及Spring运行需要的类\n\n   - `@EnableAutoConfiguration `上标注了`@Import(AutoConfigurationImportSelector.class)`\n\n   - 根据模块装配规则`AutoConfigurationImportSelector`的父类实现了`ImportSelector`接口，重写了`selectImports()`方法。\n   - Spring内部通过层层过滤，最终委托给`SpringFactoriesLoader`中`loadFactoryNames()`方法来调用`loadSpringFactories()`，并过滤返回值key是`EnableAutoConfiguration`的value\n   - `loadSpringFactories()`方法会解析资源目录下\"META-INF/spring.factories\"文件，并将数据封装成Map类型\n   - 之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF/spring.factories文件中定义的EnableAutoConfiguration的类）\n\n2. 导入自己编写的Bean\n   - `@AutoConfigurationPackage`上标注了`@Import(AutoConfigurationPackages.Registrar.class)`\n   - 根据模块装配规则``AutoConfigurationPackages.Registrar`实现了`ImportBeanDefinitionRegistrar`接口，重写了`registerBeanDefinitions()`方法。\n   - `registerBeanDefinitions()`会调用`register()`方法来注册`PackageImports`中封装的包名\n   - `PackageImports`会解析是否配置需要扫描的包名，默认是启动类所在包\n\n<!-- more -->\n\n# 1. Spring中的装配\n\nTips：框架源码类文章建议自己打开IDEA跟着看看类之间的关系\n\n## 1.1 模块装配\n\n模块装配主要是通过`@Import`注解来实现的，听名字就知道是用来导入类的。\n\n```java\n//Spring中著名的EnableAutoConfiguration注解\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n//不是导入类吗？这导入了个什么玩意儿?\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n    Class<?>[] exclude() default {};\n\n    String[] excludeName() default {};\n}\n```\n\nImport注解源码\n\n```java\n/* @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.0\n * @see Configuration\n * @see ImportSelector\n * @see ImportBeanDefinitionRegistrar\n * @see ImportResource\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Import {\n\t/**\n\t * {@link Configuration @Configuration}, {@link ImportSelector},\n\t * {@link ImportBeanDefinitionRegistrar}, or regular component classes to import.\n\t */\n\tClass<?>[] value();\n\n}\n```\n\n很清楚的看到了四种导入方式`Configuration`，`ImportSelector`、`ImportBeanDefinitionRegistrar`、`ImportResource`\n\n### 1. ImportResource（导入普通类）\n\n需要导入的User类\n\n```java\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\nclass User{\n    private Long id;\n    private String name;\n}\n```\n\n自定义的注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Import(User.class)\npublic @interface EnableUser {\n\n}\n```\n\n启动类\n\n```java\n@SpringBootApplication\n//标注自定义注解，也可以标注在配置类等地方\n@EnableUser\npublic class WebTestApplication {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(WebTestApplication.class, args);\n        String[] beanNamesForType = context.getBeanNamesForType(User.class);\n        System.out.println(beanNamesForType[0]);\n    }\n}\n```\n\n成功打印出了User\n\n![模块装配方式一](Spring自动装配原理/模块装配方式一.png)\n\n### 2. Configuration (导入配置类)\n\n建立配置类，将配置类放到启动类包扫描不到的地方（默认会扫描主启动类所在包下的所有类，我这里就直接放在主启动类包上）\n\n```java\n@Configuration\npublic class ImportConfiguration {\n    @Bean\n    public User getUser(){\n        User user = new User();\n        user.setId(36L);\n        user.setName(\"ruizhi\");\n        return user;\n    }\n}\n```\n\n修改注解\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Import(User.class)\npublic @interface EnableUser {\n\n}\n```\n\n测试，依旧可以打印出信息（具体对象注入名称问题，自行查阅）\n\n```java\n@SpringBootApplication\n@EnableUser\npublic class WebTestApplication {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(WebTestApplication.class, args);\n        String[] beanNamesForType = context.getBeanNamesForType(User.class);\n        System.out.println(beanNamesForType[0]);\n    }\n}\n```\n\n![模块装配二](Spring自动装配原理/模块装配二.png)\n\n### 3. ImportSelector（导入Selector）\n\nImportSelector接口\n\n```java\npublic interface ImportSelector {\n\n    /**\n     * Select and return the names of which class(es) should be imported based on\n     * the {@link AnnotationMetadata} of the importing @{@link Configuration} class.\n     * @return the class names, or an empty array if none\n     */\n    //返回要导入的类的全限定类名\n    String[] selectImports(AnnotationMetadata importingClassMetadata);\n}\n```\n\n自定义Selector类实现ImportSelector接口\n\n```java\npublic class UserSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata importingClassMetadata) {\n        //导入User类\n        return new String[]{User.class.getName()};\n    }\n}\n```\n\n注解更改，主启动类不需要更改\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Import(UserSelector.class)\npublic @interface EnableUser {\n\n}\n```\n\n测试结果和方式1相同\n\n### 4. ImportBeanDefinitionRegistrar（导入BeanDefinition）\n\n修改Selector类\n\n```java\npublic class UserSelector implements ImportBeanDefinitionRegistrar {\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {\n        //传入Bean id和BeanDefinition, 这里直接new了一个\n        registry.registerBeanDefinition(\"ruizhi\", new RootBeanDefinition(User.class));\n    }\n}\n```\n\n结果打印名称就是上面类注册的名称（我这打印的是\"ruizhi\")\n\n## 1.2 条件装配\n\n### 1. Conditional\n\n稍微深入了解过Spring的老哥可能就会很清楚，Spring里面有一套`@Conditional`注解，最常见的就是`@ConditionalOnMissingBean(String[] BeanName)`（没有相应Bean就注入），`@ConditionalOnClass`（有相应Class就注入），有Bean就注入、没有class就注入等一堆注解。\n\n**作用**：有了这些注解我们就可以很轻松的自定类来覆盖掉原本要自动装配的类\n\n```java\n//万恶之源，所有Conditional注解的根\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Conditional {\n\n\t/**\n\t * All {@link Condition} classes that must {@linkplain Condition#matches match}\n\t * in order for the component to be registered.\n\t */\n\tClass<? extends Condition>[] value();\n\n}\n```\n\nConditional会根据Condition来判断是否装配\n\n```java\n@FunctionalInterface\npublic interface Condition {\n\n    /**\n     * Determine if the condition matches.\n     * @param context the condition context\n     * @param metadata the metadata of the {@link org.springframework.core.type.AnnotationMetadata class}\n     * or {@link org.springframework.core.type.MethodMetadata method} being checked\n     * @return {@code true} if the condition matches and the component can be registered,\n     * or {@code false} to veto the annotated component's registration\n     */\n    //返回值为true，则注入相关Bean\n    boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata);\n}\n```\n\n到这里我们可以想到，所有衍生出的注解都是根据匹配规则实现了自己`matches()`方法。\n\n看看`ConditionalOnMissingBean`验证下想法\n\n```java\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Conditional({OnBeanCondition.class})\npublic @interface ConditionalOnMissingBean {\n    Class<?>[] value() default {};\n\n    String[] type() default {};\n\n    Class<?>[] ignored() default {};\n\n    String[] ignoredType() default {};\n\n    Class<? extends Annotation>[] annotation() default {};\n\n    String[] name() default {};\n\n    SearchStrategy search() default SearchStrategy.ALL;\n\n    Class<?>[] parameterizedContainer() default {};\n}\n\n```\n\n这时候你自信满满的打开IDEA看了下源码，在OnBeanCondition里面怎么都没找到matches()方法，只有一个 `getMatchOutcome()`？？？怎么回事？\n\n```java\n@Order(Ordered.LOWEST_PRECEDENCE)\nclass OnBeanCondition extends FilteringSpringBootCondition implements ConfigurationCondition {\n    @Override\n\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\tConditionMessage matchMessage = ConditionMessage.empty();\n\t\tMergedAnnotations annotations = metadata.getAnnotations();\n\t\tif (annotations.isPresent(ConditionalOnBean.class)) {\n\t\t\tSpec<ConditionalOnBean> spec = new Spec<>(context, metadata, annotations, ConditionalOnBean.class);\n\t\t\tMatchResult matchResult = getMatchingBeans(context, spec);\n\t\t\tif (!matchResult.isAllMatched()) {\n\t\t\t\tString reason = createOnBeanNoMatchReason(matchResult);\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().because(reason));\n\t\t\t}\n\t\t\tmatchMessage = spec.message(matchMessage).found(\"bean\", \"beans\").items(Style.QUOTE,\n\t\t\t\t\tmatchResult.getNamesOfAllMatches());\n\t\t}\n\t\tif (metadata.isAnnotated(ConditionalOnSingleCandidate.class.getName())) {\n\t\t\tSpec<ConditionalOnSingleCandidate> spec = new SingleCandidateSpec(context, metadata, annotations);\n\t\t\tMatchResult matchResult = getMatchingBeans(context, spec);\n\t\t\tif (!matchResult.isAllMatched()) {\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().didNotFind(\"any beans\").atAll());\n\t\t\t}\n\t\t\telse if (!hasSingleAutowireCandidate(context.getBeanFactory(), matchResult.getNamesOfAllMatches(),\n\t\t\t\t\tspec.getStrategy() == SearchStrategy.ALL)) {\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().didNotFind(\"a primary bean from beans\")\n\t\t\t\t\t\t.items(Style.QUOTE, matchResult.getNamesOfAllMatches()));\n\t\t\t}\n\t\t\tmatchMessage = spec.message(matchMessage).found(\"a primary bean from beans\").items(Style.QUOTE,\n\t\t\t\t\tmatchResult.getNamesOfAllMatches());\n\t\t}\n\t\tif (metadata.isAnnotated(ConditionalOnMissingBean.class.getName())) {\n\t\t\tSpec<ConditionalOnMissingBean> spec = new Spec<>(context, metadata, annotations,\n\t\t\t\t\tConditionalOnMissingBean.class);\n\t\t\tMatchResult matchResult = getMatchingBeans(context, spec);\n\t\t\tif (matchResult.isAnyMatched()) {\n\t\t\t\tString reason = createOnMissingBeanNoMatchReason(matchResult);\n\t\t\t\treturn ConditionOutcome.noMatch(spec.message().because(reason));\n\t\t\t}\n\t\t\tmatchMessage = spec.message(matchMessage).didNotFind(\"any beans\").atAll();\n\t\t}\n\t\treturn ConditionOutcome.match(matchMessage);\n\t}\n}\n```\n\n那就去看看父类吧，果然最终在`FilteringSpringBootCondition`父类`SpringBootCondition`里找到了答案\n\n可以看到Spring对`matches()`方法进行了一层的封装，在`SpringBootCondition`里`matches()`方法会调用抽象的`getMatchOutcome`(有种模版模式的感觉)，子类只需要实现`getMatchOutcome()`就行了\n\n```java\npublic abstract class SpringBootCondition implements Condition {\n\tpublic final boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n\t\tString classOrMethodName = getClassOrMethodName(metadata);\n\t\ttry {\n\t\t\tConditionOutcome outcome = getMatchOutcome(context, metadata);\n\t\t\tlogOutcome(classOrMethodName, outcome);\n\t\t\trecordEvaluation(context, classOrMethodName, outcome);\n\t\t\treturn outcome.isMatch();\n\t\t}\n\t\tcatch (NoClassDefFoundError ex) {\n\t\t\tthrow new IllegalStateException(\"Could not evaluate condition on \" + classOrMethodName + \" due to \"\n\t\t\t\t\t+ ex.getMessage() + \" not found. Make sure your own configuration does not rely on \"\n\t\t\t\t\t+ \"that class. This can also happen if you are \"\n\t\t\t\t\t+ \"@ComponentScanning a springframework package (e.g. if you \"\n\t\t\t\t\t+ \"put a @ComponentScan in the default package by mistake)\", ex);\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthrow new IllegalStateException(\"Error processing condition on \" + getName(metadata), ex);\n\t\t}\n\t}\n}\n```\n\n### 2. Profile\n\n除了Conditional，Spring中还有`@profile`注解来根据环境来注入Bean。\n\n**Environment**（环境）:Spring会把一些信息封装到Environment对象中，比如application.properties中的内容\n\n```java\n//继承PropertyResolver来解析资源\npublic interface Environment extends PropertyResolver {\n    String[] getActiveProfiles();\n\n    String[] getDefaultProfiles();\n\n    /** @deprecated */\n    @Deprecated\n    boolean acceptsProfiles(String... var1);\n\n    boolean acceptsProfiles(Profiles var1);\n}\n```\n\n测试，别忘了把Configuration路径改回来\n\n```java\npublic class WebTestApplication {\n    public static void main(String[] args) {\n        /*需要再容器refresh()之前传入profile值，可以在启动前设置参数`-DSpring.profiles.active=ruizhi`，这里就直接new一个context了*/\n        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n        ctx.getEnvironment().setActiveProfiles(\"ruizhi\");\n        ctx.register(ImportConfiguration.class);\n        ctx.refresh();\n        String[] beanNamesForType = ctx.getBeanNamesForType(User.class);\n        System.out.println(beanNamesForType[0]);\n    }\n}\n```\n\n加上profile注解，(可以更改值，自行观察是否注入User)\n\n```java\n@Configuration\npublic class ImportConfiguration {\n\n    @Bean\n    @Profile(\"ruizhi\")\n    public User getUser(){\n        User user = new User();\n        user.setId(36L);\n        user.setName(\"ruizhi\");\n        return user;\n    }\n\n}\n```\n\n# 2. SpringBoot自动装配\n\n点开注解`@SpringBootApplication`，你会发现上面标注了一个`@EnableAutoConfiguration`（允许自动装配）\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n\n\t/**\n\t * Environment property that can be used to override when auto-configuration is\n\t * enabled.\n\t */\n\tString ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n\t/**\n\t * Exclude specific auto-configuration classes such that they will never be applied.\n\t * @return the classes to exclude\n\t */\n\tClass<?>[] exclude() default {};\n\n\t/**\n\t * Exclude specific auto-configuration class names such that they will never be\n\t * applied.\n\t * @return the class names to exclude\n\t * @since 1.3.0\n\t */\n\tString[] excludeName() default {};\n\n}\n```\n\n可以看到`EnableAutoConfiguration`导入了`AutoConfigurationImportSelector.class`，继续深入看看\n\n## 2.1 AutoConfigurationImportSelector\n\n```java\n//模块装配中导入Selector的方式\npublic class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware,\n\t\tResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n    \n          ...    \n     //只要在这个方法返回类的全限定名就行了\n\t@Override\n\tpublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn NO_IMPORTS;\n\t\t}\n         //加载自动配置类，拿到类的全限定名\n\t\tAutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);\n\t\treturn StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n\t}\n            \n     protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn EMPTY_ENTRY;\n\t\t}\n\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);\n         //加载候选类\n\t\tList<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\t\tconfigurations = removeDuplicates(configurations);\n\t\tSet<String> exclusions = getExclusions(annotationMetadata, attributes);\n\t\tcheckExcludedClasses(configurations, exclusions);\n\t\tconfigurations.removeAll(exclusions);\n\t\tconfigurations = getConfigurationClassFilter().filter(configurations);\n\t\tfireAutoConfigurationImportEvents(configurations, exclusions);\n\t\treturn new AutoConfigurationEntry(configurations, exclusions);\n\t}\n            \n      protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n          //通过SpringFactoriesLoader加载类名\n\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),\n\t\t\t\tgetBeanClassLoader());\n\t\tAssert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \"\n\t\t\t\t+ \"are using a custom packaging, make sure that file is correct.\");\n\t\treturn configurations;\n\t}return configurations;\n\t}\n            \n}\n```\n\n可以看到经过层层封装，Spring把具体加载的过程委托给了**SpringFactoriesLoader**类，（终于可以到具体的加载逻辑了。\n\n```java\npublic final class SpringFactoriesLoader {\n    public static final String FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\";\n    \n\tpublic static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {\n        //factoryTypeName是EnableAutoConfiguration\n\t\tString factoryTypeName = factoryType.getName();\n        //封装成Map，返回key是EnableAutoConfiguration的类名\n\t\treturn loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());\n\t}\n\n\tprivate static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n\t\tMultiValueMap<String, String> result = cache.get(classLoader);\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\n\t\ttry {\n            //加载路径就是META-INF/spring.factories\n\t\t\tEnumeration<URL> urls = (classLoader != null ?\n\t\t\t\t\tclassLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n\t\t\t\t\tClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n\t\t\tresult = new LinkedMultiValueMap<>();\n            //遍历文件并把它放到缓存里\n\t\t\twhile (urls.hasMoreElements()) {\n\t\t\t\tURL url = urls.nextElement();\n\t\t\t\tUrlResource resource = new UrlResource(url);\n\t\t\t\tProperties properties = PropertiesLoaderUtils.loadProperties(resource);\n\t\t\t\tfor (Map.Entry<?, ?> entry : properties.entrySet()) {\n\t\t\t\t\tString factoryTypeName = ((String) entry.getKey()).trim();\n\t\t\t\t\tfor (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {\n\t\t\t\t\t\tresult.add(factoryTypeName, factoryImplementationName.trim());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcache.put(classLoader, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalArgumentException(\"Unable to load factories from location [\" +\n\t\t\t\t\tFACTORIES_RESOURCE_LOCATION + \"]\", ex);\n\t\t}\n\t}\n```\n\n通过上述过程我们也就可以想到Spring加载Starter，也是加载了starter资源目录下`META-INF/spring.factories`文件，当然自定义Starter也可以通过编写这一文件将需要的Bean导入到容器中。\n\n## 2.2 @AutoConfigurationPackage\n\n先点进去看看\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import(AutoConfigurationPackages.Registrar.class)\npublic @interface AutoConfigurationPackage {\n\n\t/**\n\t * Base packages that should be registered with {@link AutoConfigurationPackages}.\n\t * <p>\n\t * Use {@link #basePackageClasses} for a type-safe alternative to String-based package\n\t * names.\n\t * @return the back package names\n\t * @since 2.3.0\n\t */\n\tString[] basePackages() default {};\n\n\t/**\n\t * Type-safe alternative to {@link #basePackages} for specifying the packages to be\n\t * registered with {@link AutoConfigurationPackages}.\n\t * <p>\n\t * Consider creating a special no-op marker class or interface in each package that\n\t * serves no purpose other than being referenced by this attribute.\n\t * @return the base package classes\n\t * @since 2.3.0\n\t */\n\tClass<?>[] basePackageClasses() default {};\n\n}\n```\n\n可以看到`AutoConfigurationPackage`上面还有一个Import注解，导入了`AutoConfigurationPackages.Registrar.class`，继续往下看看\n\n```java\n//模块装配中导入BeanDefinition的方式\nstatic class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports {\n\n\t\t@Override\n\t\tpublic void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {\n            //调用外部的register方法，AnnotationMetadata是被标注注解的类的元信息（这里主要是为了获取主类包名）\n            //关于AnnotationMetadata以及BeanDefinitionRegistry的相关信息自行查阅\n\t\t\tregister(registry, new PackageImports(metadata).getPackageNames().toArray(new String[0]));\n\t\t}\n\t\t@Override\n\t\tpublic Set<Object> determineImports(AnnotationMetadata metadata) {\n\t\t\treturn Collections.singleton(new PackageImports(metadata));\n\t\t}\n\n\t}\n```\n\n但是PackageImports是什么？点进去看看\n\n```java\nprivate static final class PackageImports {\n\n\t\tprivate final List<String> packageNames;\n\n\t\tPackageImports(AnnotationMetadata metadata) {\n\t\t\tAnnotationAttributes attributes = AnnotationAttributes\n\t\t\t\t\t.fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), false));\n\t\t\tList<String> packageNames = new ArrayList<>();\n            //判断自己有没有配置basePackages\n\t\t\tfor (String basePackage : attributes.getStringArray(\"basePackages\")) {\n\t\t\t\tpackageNames.add(basePackage);\n\t\t\t}\n\t\t\tfor (Class<?> basePackageClass : attributes.getClassArray(\"basePackageClasses\")) {\n\t\t\t\tpackageNames.add(basePackageClass.getPackage().getName());\n\t\t\t}\n            //默认空的会自动添加类的包路径\n\t\t\tif (packageNames.isEmpty()) {\n\t\t\t\tpackageNames.add(ClassUtils.getPackageName(metadata.getClassName()));\n\t\t\t}\n\t\t\tthis.packageNames = Collections.unmodifiableList(packageNames);\n\t\t}\n\t}\n```\n\n# 3. 总结\n\n`@SpringBootApplication`上标注了`@EnableAutoConfiguration`，这自动装配的起点。\n\n1. 导入starter及Spring运行需要的类\n\n   - `@EnableAutoConfiguration `上标注了`@Import(AutoConfigurationImportSelector.class)`\n\n   - 根据模块装配规则`AutoConfigurationImportSelector`的父类实现了`ImportSelector`接口，重写了`selectImports()`方法。\n   - Spring内部通过层层过滤，最终委托给`SpringFactoriesLoader`中`loadFactoryNames()`方法来调用`loadSpringFactories()`，并过滤返回值key是`EnableAutoConfiguration`的value\n   - `loadSpringFactories()`方法会解析资源目录下\"META-INF/spring.factories\"文件，并将数据封装成Map类型\n   - 之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF/spring.factories文件中定义的EnableAutoConfiguration的类）\n\n2. 导入自己编写的Bean\n   - `@AutoConfigurationPackage`上标注了`@Import(AutoConfigurationPackages.Registrar.class)`\n   - 根据模块装配规则``AutoConfigurationPackages.Registrar`实现了`ImportBeanDefinitionRegistrar`接口，重写了`registerBeanDefinitions()`方法。\n   - `registerBeanDefinitions()`会调用`register()`方法来注册`PackageImports`中封装的包名\n   - `PackageImports`会解析是否配置需要扫描的包名，默认是启动类所在包\n\n","slug":"Spring自动装配原理","published":1,"updated":"2024-05-14T06:23:36.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw6d4baj0007psus7us699w0","content":"<p>SpringBoot自动装配 &#x3D; 模块装配 + 条件装配</p>\n<p><code>@SpringBootApplication</code>上标注了<code>@EnableAutoConfiguration</code>，这自动装配的起点。</p>\n<ol>\n<li><p>导入starter及Spring运行需要的类</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration </code>上标注了<code>@Import(AutoConfigurationImportSelector.class)</code></p>\n</li>\n<li><p>根据模块装配规则<code>AutoConfigurationImportSelector</code>的父类实现了<code>ImportSelector</code>接口，重写了<code>selectImports()</code>方法。</p>\n</li>\n<li><p>Spring内部通过层层过滤，最终委托给<code>SpringFactoriesLoader</code>中<code>loadFactoryNames()</code>方法来调用<code>loadSpringFactories()</code>，并过滤返回值key是<code>EnableAutoConfiguration</code>的value</p>\n</li>\n<li><p><code>loadSpringFactories()</code>方法会解析资源目录下”META-INF&#x2F;spring.factories”文件，并将数据封装成Map类型</p>\n</li>\n<li><p>之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF&#x2F;spring.factories文件中定义的EnableAutoConfiguration的类）</p>\n</li>\n</ul>\n</li>\n<li><p>导入自己编写的Bean</p>\n<ul>\n<li><code>@AutoConfigurationPackage</code>上标注了<code>@Import(AutoConfigurationPackages.Registrar.class)</code></li>\n<li>根据模块装配规则&#96;&#96;AutoConfigurationPackages.Registrar<code>实现了</code>ImportBeanDefinitionRegistrar<code>接口，重写了</code>registerBeanDefinitions()&#96;方法。</li>\n<li><code>registerBeanDefinitions()</code>会调用<code>register()</code>方法来注册<code>PackageImports</code>中封装的包名</li>\n<li><code>PackageImports</code>会解析是否配置需要扫描的包名，默认是启动类所在包</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"1-Spring中的装配\"><a href=\"#1-Spring中的装配\" class=\"headerlink\" title=\"1. Spring中的装配\"></a>1. Spring中的装配</h1><p>Tips：框架源码类文章建议自己打开IDEA跟着看看类之间的关系</p>\n<h2 id=\"1-1-模块装配\"><a href=\"#1-1-模块装配\" class=\"headerlink\" title=\"1.1 模块装配\"></a>1.1 模块装配</h2><p>模块装配主要是通过<code>@Import</code>注解来实现的，听名字就知道是用来导入类的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Spring中著名的EnableAutoConfiguration注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"comment\">//不是导入类吗？这导入了个什么玩意儿?</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Import注解源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @author Chris Beams</span></span><br><span class=\"line\"><span class=\"comment\"> * @author Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * @since 3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @see Configuration</span></span><br><span class=\"line\"><span class=\"comment\"> * @see ImportSelector</span></span><br><span class=\"line\"><span class=\"comment\"> * @see ImportBeanDefinitionRegistrar</span></span><br><span class=\"line\"><span class=\"comment\"> * @see ImportResource</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Import &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> Configuration <span class=\"doctag\">@Configuration</span>&#125;, &#123;<span class=\"doctag\">@link</span> ImportSelector&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ImportBeanDefinitionRegistrar&#125;, or regular component classes to import.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;?&gt;[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很清楚的看到了四种导入方式<code>Configuration</code>，<code>ImportSelector</code>、<code>ImportBeanDefinitionRegistrar</code>、<code>ImportResource</code></p>\n<h3 id=\"1-ImportResource（导入普通类）\"><a href=\"#1-ImportResource（导入普通类）\" class=\"headerlink\" title=\"1. ImportResource（导入普通类）\"></a>1. ImportResource（导入普通类）</h3><p>需要导入的User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(User.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableUser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">//标注自定义注解，也可以标注在配置类等地方</span></span><br><span class=\"line\"><span class=\"meta\">@EnableUser</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebTestApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> SpringApplication.run(WebTestApplication.class, args);</span><br><span class=\"line\">        String[] beanNamesForType = context.getBeanNamesForType(User.class);</span><br><span class=\"line\">        System.out.println(beanNamesForType[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功打印出了User</p>\n<p><img src=\"/2024/04/22/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F%E4%B8%80.png\" alt=\"模块装配方式一\"></p>\n<h3 id=\"2-Configuration-导入配置类\"><a href=\"#2-Configuration-导入配置类\" class=\"headerlink\" title=\"2. Configuration (导入配置类)\"></a>2. Configuration (导入配置类)</h3><p>建立配置类，将配置类放到启动类包扫描不到的地方（默认会扫描主启动类所在包下的所有类，我这里就直接放在主启动类包上）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImportConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setId(<span class=\"number\">36L</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;ruizhi&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(User.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableUser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试，依旧可以打印出信息（具体对象注入名称问题，自行查阅）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableUser</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebTestApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> SpringApplication.run(WebTestApplication.class, args);</span><br><span class=\"line\">        String[] beanNamesForType = context.getBeanNamesForType(User.class);</span><br><span class=\"line\">        System.out.println(beanNamesForType[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/22/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E4%BA%8C.png\" alt=\"模块装配二\"></p>\n<h3 id=\"3-ImportSelector（导入Selector）\"><a href=\"#3-ImportSelector（导入Selector）\" class=\"headerlink\" title=\"3. ImportSelector（导入Selector）\"></a>3. ImportSelector（导入Selector）</h3><p>ImportSelector接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Select and return the names of which class(es) should be imported based on</span></span><br><span class=\"line\"><span class=\"comment\">     * the &#123;<span class=\"doctag\">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class=\"doctag\">@link</span> Configuration&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the class names, or an empty array if none</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//返回要导入的类的全限定类名</span></span><br><span class=\"line\">    String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义Selector类实现ImportSelector接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//导入User类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;User.class.getName()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注解更改，主启动类不需要更改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(UserSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableUser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试结果和方式1相同</p>\n<h3 id=\"4-ImportBeanDefinitionRegistrar（导入BeanDefinition）\"><a href=\"#4-ImportBeanDefinitionRegistrar（导入BeanDefinition）\" class=\"headerlink\" title=\"4. ImportBeanDefinitionRegistrar（导入BeanDefinition）\"></a>4. ImportBeanDefinitionRegistrar（导入BeanDefinition）</h3><p>修改Selector类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入Bean id和BeanDefinition, 这里直接new了一个</span></span><br><span class=\"line\">        registry.registerBeanDefinition(<span class=\"string\">&quot;ruizhi&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(User.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果打印名称就是上面类注册的名称（我这打印的是”ruizhi”)</p>\n<h2 id=\"1-2-条件装配\"><a href=\"#1-2-条件装配\" class=\"headerlink\" title=\"1.2 条件装配\"></a>1.2 条件装配</h2><h3 id=\"1-Conditional\"><a href=\"#1-Conditional\" class=\"headerlink\" title=\"1. Conditional\"></a>1. Conditional</h3><p>稍微深入了解过Spring的老哥可能就会很清楚，Spring里面有一套<code>@Conditional</code>注解，最常见的就是<code>@ConditionalOnMissingBean(String[] BeanName)</code>（没有相应Bean就注入），<code>@ConditionalOnClass</code>（有相应Class就注入），有Bean就注入、没有class就注入等一堆注解。</p>\n<p><strong>作用</strong>：有了这些注解我们就可以很轻松的自定类来覆盖掉原本要自动装配的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//万恶之源，所有Conditional注解的根</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Conditional &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * All &#123;<span class=\"doctag\">@link</span> Condition&#125; classes that must &#123;<span class=\"doctag\">@linkplain</span> Condition#matches match&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * in order for the component to be registered.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Condition</span>&gt;[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Conditional会根据Condition来判断是否装配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Condition</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine if the condition matches.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context the condition context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> metadata the metadata of the &#123;<span class=\"doctag\">@link</span> org.springframework.core.type.AnnotationMetadata class&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * or &#123;<span class=\"doctag\">@link</span> org.springframework.core.type.MethodMetadata method&#125; being checked</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the condition matches and the component can be registered,</span></span><br><span class=\"line\"><span class=\"comment\">     * or &#123;<span class=\"doctag\">@code</span> false&#125; to veto the annotated component&#x27;s registration</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//返回值为true，则注入相关Bean</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里我们可以想到，所有衍生出的注解都是根据匹配规则实现了自己<code>matches()</code>方法。</p>\n<p>看看<code>ConditionalOnMissingBean</code>验证下想法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(&#123;OnBeanCondition.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ConditionalOnMissingBean &#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] type() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] ignored() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] ignoredType() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Annotation</span>&gt;[] annotation() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] name() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    SearchStrategy <span class=\"title function_\">search</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> SearchStrategy.ALL;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] parameterizedContainer() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这时候你自信满满的打开IDEA看了下源码，在OnBeanCondition里面怎么都没找到matches()方法，只有一个 <code>getMatchOutcome()</code>？？？怎么回事？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order(Ordered.LOWEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OnBeanCondition</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FilteringSpringBootCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurationCondition</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ConditionOutcome <span class=\"title function_\">getMatchOutcome</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ConditionMessage</span> <span class=\"variable\">matchMessage</span> <span class=\"operator\">=</span> ConditionMessage.empty();</span><br><span class=\"line\">\t\t<span class=\"type\">MergedAnnotations</span> <span class=\"variable\">annotations</span> <span class=\"operator\">=</span> metadata.getAnnotations();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (annotations.isPresent(ConditionalOnBean.class)) &#123;</span><br><span class=\"line\">\t\t\tSpec&lt;ConditionalOnBean&gt; spec = <span class=\"keyword\">new</span> <span class=\"title class_\">Spec</span>&lt;&gt;(context, metadata, annotations, ConditionalOnBean.class);</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> <span class=\"variable\">matchResult</span> <span class=\"operator\">=</span> getMatchingBeans(context, spec);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!matchResult.isAllMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">reason</span> <span class=\"operator\">=</span> createOnBeanNoMatchReason(matchResult);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().because(reason));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatchMessage = spec.message(matchMessage).found(<span class=\"string\">&quot;bean&quot;</span>, <span class=\"string\">&quot;beans&quot;</span>).items(Style.QUOTE,</span><br><span class=\"line\">\t\t\t\t\tmatchResult.getNamesOfAllMatches());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (metadata.isAnnotated(ConditionalOnSingleCandidate.class.getName())) &#123;</span><br><span class=\"line\">\t\t\tSpec&lt;ConditionalOnSingleCandidate&gt; spec = <span class=\"keyword\">new</span> <span class=\"title class_\">SingleCandidateSpec</span>(context, metadata, annotations);</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> <span class=\"variable\">matchResult</span> <span class=\"operator\">=</span> getMatchingBeans(context, spec);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!matchResult.isAllMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().didNotFind(<span class=\"string\">&quot;any beans&quot;</span>).atAll());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasSingleAutowireCandidate(context.getBeanFactory(), matchResult.getNamesOfAllMatches(),</span><br><span class=\"line\">\t\t\t\t\tspec.getStrategy() == SearchStrategy.ALL)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().didNotFind(<span class=\"string\">&quot;a primary bean from beans&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.items(Style.QUOTE, matchResult.getNamesOfAllMatches()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatchMessage = spec.message(matchMessage).found(<span class=\"string\">&quot;a primary bean from beans&quot;</span>).items(Style.QUOTE,</span><br><span class=\"line\">\t\t\t\t\tmatchResult.getNamesOfAllMatches());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (metadata.isAnnotated(ConditionalOnMissingBean.class.getName())) &#123;</span><br><span class=\"line\">\t\t\tSpec&lt;ConditionalOnMissingBean&gt; spec = <span class=\"keyword\">new</span> <span class=\"title class_\">Spec</span>&lt;&gt;(context, metadata, annotations,</span><br><span class=\"line\">\t\t\t\t\tConditionalOnMissingBean.class);</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> <span class=\"variable\">matchResult</span> <span class=\"operator\">=</span> getMatchingBeans(context, spec);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (matchResult.isAnyMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">reason</span> <span class=\"operator\">=</span> createOnMissingBeanNoMatchReason(matchResult);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().because(reason));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatchMessage = spec.message(matchMessage).didNotFind(<span class=\"string\">&quot;any beans&quot;</span>).atAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ConditionOutcome.match(matchMessage);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那就去看看父类吧，果然最终在<code>FilteringSpringBootCondition</code>父类<code>SpringBootCondition</code>里找到了答案</p>\n<p>可以看到Spring对<code>matches()</code>方法进行了一层的封装，在<code>SpringBootCondition</code>里<code>matches()</code>方法会调用抽象的<code>getMatchOutcome</code>(有种模版模式的感觉)，子类只需要实现<code>getMatchOutcome()</code>就行了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Condition</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">classOrMethodName</span> <span class=\"operator\">=</span> getClassOrMethodName(metadata);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">ConditionOutcome</span> <span class=\"variable\">outcome</span> <span class=\"operator\">=</span> getMatchOutcome(context, metadata);</span><br><span class=\"line\">\t\t\tlogOutcome(classOrMethodName, outcome);</span><br><span class=\"line\">\t\t\trecordEvaluation(context, classOrMethodName, outcome);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> outcome.isMatch();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (NoClassDefFoundError ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Could not evaluate condition on &quot;</span> + classOrMethodName + <span class=\"string\">&quot; due to &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ ex.getMessage() + <span class=\"string\">&quot; not found. Make sure your own configuration does not rely on &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;that class. This can also happen if you are &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;@ComponentScanning a springframework package (e.g. if you &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;put a @ComponentScan in the default package by mistake)&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (RuntimeException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Error processing condition on &quot;</span> + getName(metadata), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Profile\"><a href=\"#2-Profile\" class=\"headerlink\" title=\"2. Profile\"></a>2. Profile</h3><p>除了Conditional，Spring中还有<code>@profile</code>注解来根据环境来注入Bean。</p>\n<p><strong>Environment</strong>（环境）:Spring会把一些信息封装到Environment对象中，比如application.properties中的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承PropertyResolver来解析资源</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Environment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PropertyResolver</span> &#123;</span><br><span class=\"line\">    String[] getActiveProfiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] getDefaultProfiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">acceptsProfiles</span><span class=\"params\">(String... var1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">acceptsProfiles</span><span class=\"params\">(Profiles var1)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试，别忘了把Configuration路径改回来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebTestApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*需要再容器refresh()之前传入profile值，可以在启动前设置参数`-DSpring.profiles.active=ruizhi`，这里就直接new一个context了*/</span></span><br><span class=\"line\">        <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>();</span><br><span class=\"line\">        ctx.getEnvironment().setActiveProfiles(<span class=\"string\">&quot;ruizhi&quot;</span>);</span><br><span class=\"line\">        ctx.register(ImportConfiguration.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\">        String[] beanNamesForType = ctx.getBeanNamesForType(User.class);</span><br><span class=\"line\">        System.out.println(beanNamesForType[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加上profile注解，(可以更改值，自行观察是否注入User)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImportConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile(&quot;ruizhi&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setId(<span class=\"number\">36L</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;ruizhi&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-SpringBoot自动装配\"><a href=\"#2-SpringBoot自动装配\" class=\"headerlink\" title=\"2. SpringBoot自动装配\"></a>2. SpringBoot自动装配</h1><p>点开注解<code>@SpringBootApplication</code>，你会发现上面标注了一个<code>@EnableAutoConfiguration</code>（允许自动装配）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Environment property that can be used to override when auto-configuration is</span></span><br><span class=\"line\"><span class=\"comment\">\t * enabled.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the classes to exclude</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class=\"line\"><span class=\"comment\">\t * applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the class names to exclude</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 1.3.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>EnableAutoConfiguration</code>导入了<code>AutoConfigurationImportSelector.class</code>，继续深入看看</p>\n<h2 id=\"2-1-AutoConfigurationImportSelector\"><a href=\"#2-1-AutoConfigurationImportSelector\" class=\"headerlink\" title=\"2.1 AutoConfigurationImportSelector\"></a>2.1 AutoConfigurationImportSelector</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模块装配中导入Selector的方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoConfigurationImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DeferredImportSelector</span>, BeanClassLoaderAware,</span><br><span class=\"line\">\t\tResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">          ...    </span><br><span class=\"line\">     <span class=\"comment\">//只要在这个方法返回类的全限定名就行了</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> NO_IMPORTS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">         <span class=\"comment\">//加载自动配置类，拿到类的全限定名</span></span><br><span class=\"line\">\t\t<span class=\"type\">AutoConfigurationEntry</span> <span class=\"variable\">autoConfigurationEntry</span> <span class=\"operator\">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">     <span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title function_\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> getAttributes(annotationMetadata);</span><br><span class=\"line\">         <span class=\"comment\">//加载候选类</span></span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tconfigurations = removeDuplicates(configurations);</span><br><span class=\"line\">\t\tSet&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tcheckExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">\t\tconfigurations.removeAll(exclusions);</span><br><span class=\"line\">\t\tconfigurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">\t\tfireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">      <span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title function_\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//通过SpringFactoriesLoader加载类名</span></span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">\t\t\t\tgetBeanClassLoader());</span><br><span class=\"line\">\t\tAssert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到经过层层封装，Spring把具体加载的过程委托给了<strong>SpringFactoriesLoader</strong>类，（终于可以到具体的加载逻辑了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringFactoriesLoader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FACTORIES_RESOURCE_LOCATION</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;META-INF/spring.factories&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">loadFactoryNames</span><span class=\"params\">(Class&lt;?&gt; factoryType, <span class=\"meta\">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//factoryTypeName是EnableAutoConfiguration</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">factoryTypeName</span> <span class=\"operator\">=</span> factoryType.getName();</span><br><span class=\"line\">        <span class=\"comment\">//封装成Map，返回key是EnableAutoConfiguration的类名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class=\"title function_\">loadSpringFactories</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">\t\tMultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//加载路径就是META-INF/spring.factories</span></span><br><span class=\"line\">\t\t\tEnumeration&lt;URL&gt; urls = (classLoader != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">\t\t\t\t\tclassLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class=\"line\">\t\t\t\t\tClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class=\"line\">\t\t\tresult = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//遍历文件并把它放到缓存里</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> urls.nextElement();</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">UrlResource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlResource</span>(url);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">factoryTypeName</span> <span class=\"operator\">=</span> ((String) entry.getKey()).trim();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tresult.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcache.put(classLoader, result);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class=\"line\">\t\t\t\t\tFACTORIES_RESOURCE_LOCATION + <span class=\"string\">&quot;]&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上述过程我们也就可以想到Spring加载Starter，也是加载了starter资源目录下<code>META-INF/spring.factories</code>文件，当然自定义Starter也可以通过编写这一文件将需要的Bean导入到容器中。</p>\n<h2 id=\"2-2-AutoConfigurationPackage\"><a href=\"#2-2-AutoConfigurationPackage\" class=\"headerlink\" title=\"2.2 @AutoConfigurationPackage\"></a>2.2 @AutoConfigurationPackage</h2><p>先点进去看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoConfigurationPackage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Base packages that should be registered with &#123;<span class=\"doctag\">@link</span> AutoConfigurationPackages&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Use &#123;<span class=\"doctag\">@link</span> #basePackageClasses&#125; for a type-safe alternative to String-based package</span></span><br><span class=\"line\"><span class=\"comment\">\t * names.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the back package names</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.3.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString[] basePackages() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Type-safe alternative to &#123;<span class=\"doctag\">@link</span> #basePackages&#125; for specifying the packages to be</span></span><br><span class=\"line\"><span class=\"comment\">\t * registered with &#123;<span class=\"doctag\">@link</span> AutoConfigurationPackages&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Consider creating a special no-op marker class or interface in each package that</span></span><br><span class=\"line\"><span class=\"comment\">\t * serves no purpose other than being referenced by this attribute.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the base package classes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.3.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;?&gt;[] basePackageClasses() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>AutoConfigurationPackage</code>上面还有一个Import注解，导入了<code>AutoConfigurationPackages.Registrar.class</code>，继续往下看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模块装配中导入BeanDefinition的方式</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Registrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用外部的register方法，AnnotationMetadata是被标注注解的类的元信息（这里主要是为了获取主类包名）</span></span><br><span class=\"line\">            <span class=\"comment\">//关于AnnotationMetadata以及BeanDefinitionRegistry的相关信息自行查阅</span></span><br><span class=\"line\">\t\t\tregister(registry, <span class=\"keyword\">new</span> <span class=\"title class_\">PackageImports</span>(metadata).getPackageNames().toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title function_\">determineImports</span><span class=\"params\">(AnnotationMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Collections.singleton(<span class=\"keyword\">new</span> <span class=\"title class_\">PackageImports</span>(metadata));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是PackageImports是什么？点进去看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PackageImports</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; packageNames;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPackageImports(AnnotationMetadata metadata) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> AnnotationAttributes</span><br><span class=\"line\">\t\t\t\t\t.fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), <span class=\"literal\">false</span>));</span><br><span class=\"line\">\t\t\tList&lt;String&gt; packageNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//判断自己有没有配置basePackages</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String basePackage : attributes.getStringArray(<span class=\"string\">&quot;basePackages&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tpackageNames.add(basePackage);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Class&lt;?&gt; basePackageClass : attributes.getClassArray(<span class=\"string\">&quot;basePackageClasses&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tpackageNames.add(basePackageClass.getPackage().getName());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">//默认空的会自动添加类的包路径</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (packageNames.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tpackageNames.add(ClassUtils.getPackageName(metadata.getClassName()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.packageNames = Collections.unmodifiableList(packageNames);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p><code>@SpringBootApplication</code>上标注了<code>@EnableAutoConfiguration</code>，这自动装配的起点。</p>\n<ol>\n<li><p>导入starter及Spring运行需要的类</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration </code>上标注了<code>@Import(AutoConfigurationImportSelector.class)</code></p>\n</li>\n<li><p>根据模块装配规则<code>AutoConfigurationImportSelector</code>的父类实现了<code>ImportSelector</code>接口，重写了<code>selectImports()</code>方法。</p>\n</li>\n<li><p>Spring内部通过层层过滤，最终委托给<code>SpringFactoriesLoader</code>中<code>loadFactoryNames()</code>方法来调用<code>loadSpringFactories()</code>，并过滤返回值key是<code>EnableAutoConfiguration</code>的value</p>\n</li>\n<li><p><code>loadSpringFactories()</code>方法会解析资源目录下”META-INF&#x2F;spring.factories”文件，并将数据封装成Map类型</p>\n</li>\n<li><p>之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF&#x2F;spring.factories文件中定义的EnableAutoConfiguration的类）</p>\n</li>\n</ul>\n</li>\n<li><p>导入自己编写的Bean</p>\n<ul>\n<li><code>@AutoConfigurationPackage</code>上标注了<code>@Import(AutoConfigurationPackages.Registrar.class)</code></li>\n<li>根据模块装配规则&#96;&#96;AutoConfigurationPackages.Registrar<code>实现了</code>ImportBeanDefinitionRegistrar<code>接口，重写了</code>registerBeanDefinitions()&#96;方法。</li>\n<li><code>registerBeanDefinitions()</code>会调用<code>register()</code>方法来注册<code>PackageImports</code>中封装的包名</li>\n<li><code>PackageImports</code>会解析是否配置需要扫描的包名，默认是启动类所在包</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"length":2815,"excerpt":"<p>SpringBoot自动装配 &#x3D; 模块装配 + 条件装配</p>\n<p><code>@SpringBootApplication</code>上标注了<code>@EnableAutoConfiguration</code>，这自动装配的起点。</p>\n<ol>\n<li><p>导入starter及Spring运行需要的类</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration </code>上标注了<code>@Import(AutoConfigurationImportSelector.class)</code></p>\n</li>\n<li><p>根据模块装配规则<code>AutoConfigurationImportSelector</code>的父类实现了<code>ImportSelector</code>接口，重写了<code>selectImports()</code>方法。</p>\n</li>\n<li><p>Spring内部通过层层过滤，最终委托给<code>SpringFactoriesLoader</code>中<code>loadFactoryNames()</code>方法来调用<code>loadSpringFactories()</code>，并过滤返回值key是<code>EnableAutoConfiguration</code>的value</p>\n</li>\n<li><p><code>loadSpringFactories()</code>方法会解析资源目录下”META-INF&#x2F;spring.factories”文件，并将数据封装成Map类型</p>\n</li>\n<li><p>之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF&#x2F;spring.factories文件中定义的EnableAutoConfiguration的类）</p>\n</li>\n</ul>\n</li>\n<li><p>导入自己编写的Bean</p>\n<ul>\n<li><code>@AutoConfigurationPackage</code>上标注了<code>@Import(AutoConfigurationPackages.Registrar.class)</code></li>\n<li>根据模块装配规则&#96;&#96;AutoConfigurationPackages.Registrar<code>实现了</code>ImportBeanDefinitionRegistrar<code>接口，重写了</code>registerBeanDefinitions()&#96;方法。</li>\n<li><code>registerBeanDefinitions()</code>会调用<code>register()</code>方法来注册<code>PackageImports</code>中封装的包名</li>\n<li><code>PackageImports</code>会解析是否配置需要扫描的包名，默认是启动类所在包</li>\n</ul>\n</li>\n</ol>","more":"<h1 id=\"1-Spring中的装配\"><a href=\"#1-Spring中的装配\" class=\"headerlink\" title=\"1. Spring中的装配\"></a>1. Spring中的装配</h1><p>Tips：框架源码类文章建议自己打开IDEA跟着看看类之间的关系</p>\n<h2 id=\"1-1-模块装配\"><a href=\"#1-1-模块装配\" class=\"headerlink\" title=\"1.1 模块装配\"></a>1.1 模块装配</h2><p>模块装配主要是通过<code>@Import</code>注解来实现的，听名字就知道是用来导入类的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Spring中著名的EnableAutoConfiguration注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"comment\">//不是导入类吗？这导入了个什么玩意儿?</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Import注解源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @author Chris Beams</span></span><br><span class=\"line\"><span class=\"comment\"> * @author Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\"> * @since 3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @see Configuration</span></span><br><span class=\"line\"><span class=\"comment\"> * @see ImportSelector</span></span><br><span class=\"line\"><span class=\"comment\"> * @see ImportBeanDefinitionRegistrar</span></span><br><span class=\"line\"><span class=\"comment\"> * @see ImportResource</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Import &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> Configuration <span class=\"doctag\">@Configuration</span>&#125;, &#123;<span class=\"doctag\">@link</span> ImportSelector&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ImportBeanDefinitionRegistrar&#125;, or regular component classes to import.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;?&gt;[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很清楚的看到了四种导入方式<code>Configuration</code>，<code>ImportSelector</code>、<code>ImportBeanDefinitionRegistrar</code>、<code>ImportResource</code></p>\n<h3 id=\"1-ImportResource（导入普通类）\"><a href=\"#1-ImportResource（导入普通类）\" class=\"headerlink\" title=\"1. ImportResource（导入普通类）\"></a>1. ImportResource（导入普通类）</h3><p>需要导入的User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(User.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableUser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">//标注自定义注解，也可以标注在配置类等地方</span></span><br><span class=\"line\"><span class=\"meta\">@EnableUser</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebTestApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> SpringApplication.run(WebTestApplication.class, args);</span><br><span class=\"line\">        String[] beanNamesForType = context.getBeanNamesForType(User.class);</span><br><span class=\"line\">        System.out.println(beanNamesForType[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功打印出了User</p>\n<p><img src=\"/2024/04/22/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E6%96%B9%E5%BC%8F%E4%B8%80.png\" alt=\"模块装配方式一\"></p>\n<h3 id=\"2-Configuration-导入配置类\"><a href=\"#2-Configuration-导入配置类\" class=\"headerlink\" title=\"2. Configuration (导入配置类)\"></a>2. Configuration (导入配置类)</h3><p>建立配置类，将配置类放到启动类包扫描不到的地方（默认会扫描主启动类所在包下的所有类，我这里就直接放在主启动类包上）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImportConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setId(<span class=\"number\">36L</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;ruizhi&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(User.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableUser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试，依旧可以打印出信息（具体对象注入名称问题，自行查阅）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableUser</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebTestApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> SpringApplication.run(WebTestApplication.class, args);</span><br><span class=\"line\">        String[] beanNamesForType = context.getBeanNamesForType(User.class);</span><br><span class=\"line\">        System.out.println(beanNamesForType[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/22/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/%E6%A8%A1%E5%9D%97%E8%A3%85%E9%85%8D%E4%BA%8C.png\" alt=\"模块装配二\"></p>\n<h3 id=\"3-ImportSelector（导入Selector）\"><a href=\"#3-ImportSelector（导入Selector）\" class=\"headerlink\" title=\"3. ImportSelector（导入Selector）\"></a>3. ImportSelector（导入Selector）</h3><p>ImportSelector接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Select and return the names of which class(es) should be imported based on</span></span><br><span class=\"line\"><span class=\"comment\">     * the &#123;<span class=\"doctag\">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class=\"doctag\">@link</span> Configuration&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the class names, or an empty array if none</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//返回要导入的类的全限定类名</span></span><br><span class=\"line\">    String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义Selector类实现ImportSelector接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//导入User类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;User.class.getName()&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注解更改，主启动类不需要更改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(UserSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableUser &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试结果和方式1相同</p>\n<h3 id=\"4-ImportBeanDefinitionRegistrar（导入BeanDefinition）\"><a href=\"#4-ImportBeanDefinitionRegistrar（导入BeanDefinition）\" class=\"headerlink\" title=\"4. ImportBeanDefinitionRegistrar（导入BeanDefinition）\"></a>4. ImportBeanDefinitionRegistrar（导入BeanDefinition）</h3><p>修改Selector类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入Bean id和BeanDefinition, 这里直接new了一个</span></span><br><span class=\"line\">        registry.registerBeanDefinition(<span class=\"string\">&quot;ruizhi&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(User.class));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果打印名称就是上面类注册的名称（我这打印的是”ruizhi”)</p>\n<h2 id=\"1-2-条件装配\"><a href=\"#1-2-条件装配\" class=\"headerlink\" title=\"1.2 条件装配\"></a>1.2 条件装配</h2><h3 id=\"1-Conditional\"><a href=\"#1-Conditional\" class=\"headerlink\" title=\"1. Conditional\"></a>1. Conditional</h3><p>稍微深入了解过Spring的老哥可能就会很清楚，Spring里面有一套<code>@Conditional</code>注解，最常见的就是<code>@ConditionalOnMissingBean(String[] BeanName)</code>（没有相应Bean就注入），<code>@ConditionalOnClass</code>（有相应Class就注入），有Bean就注入、没有class就注入等一堆注解。</p>\n<p><strong>作用</strong>：有了这些注解我们就可以很轻松的自定类来覆盖掉原本要自动装配的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//万恶之源，所有Conditional注解的根</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Conditional &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * All &#123;<span class=\"doctag\">@link</span> Condition&#125; classes that must &#123;<span class=\"doctag\">@linkplain</span> Condition#matches match&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * in order for the component to be registered.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Condition</span>&gt;[] value();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Conditional会根据Condition来判断是否装配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Condition</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine if the condition matches.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context the condition context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> metadata the metadata of the &#123;<span class=\"doctag\">@link</span> org.springframework.core.type.AnnotationMetadata class&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * or &#123;<span class=\"doctag\">@link</span> org.springframework.core.type.MethodMetadata method&#125; being checked</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the condition matches and the component can be registered,</span></span><br><span class=\"line\"><span class=\"comment\">     * or &#123;<span class=\"doctag\">@code</span> false&#125; to veto the annotated component&#x27;s registration</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//返回值为true，则注入相关Bean</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里我们可以想到，所有衍生出的注解都是根据匹配规则实现了自己<code>matches()</code>方法。</p>\n<p>看看<code>ConditionalOnMissingBean</code>验证下想法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(&#123;OnBeanCondition.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ConditionalOnMissingBean &#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] type() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] ignored() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] ignoredType() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Annotation</span>&gt;[] annotation() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] name() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    SearchStrategy <span class=\"title function_\">search</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> SearchStrategy.ALL;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] parameterizedContainer() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这时候你自信满满的打开IDEA看了下源码，在OnBeanCondition里面怎么都没找到matches()方法，只有一个 <code>getMatchOutcome()</code>？？？怎么回事？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order(Ordered.LOWEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OnBeanCondition</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FilteringSpringBootCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurationCondition</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ConditionOutcome <span class=\"title function_\">getMatchOutcome</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ConditionMessage</span> <span class=\"variable\">matchMessage</span> <span class=\"operator\">=</span> ConditionMessage.empty();</span><br><span class=\"line\">\t\t<span class=\"type\">MergedAnnotations</span> <span class=\"variable\">annotations</span> <span class=\"operator\">=</span> metadata.getAnnotations();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (annotations.isPresent(ConditionalOnBean.class)) &#123;</span><br><span class=\"line\">\t\t\tSpec&lt;ConditionalOnBean&gt; spec = <span class=\"keyword\">new</span> <span class=\"title class_\">Spec</span>&lt;&gt;(context, metadata, annotations, ConditionalOnBean.class);</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> <span class=\"variable\">matchResult</span> <span class=\"operator\">=</span> getMatchingBeans(context, spec);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!matchResult.isAllMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">reason</span> <span class=\"operator\">=</span> createOnBeanNoMatchReason(matchResult);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().because(reason));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatchMessage = spec.message(matchMessage).found(<span class=\"string\">&quot;bean&quot;</span>, <span class=\"string\">&quot;beans&quot;</span>).items(Style.QUOTE,</span><br><span class=\"line\">\t\t\t\t\tmatchResult.getNamesOfAllMatches());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (metadata.isAnnotated(ConditionalOnSingleCandidate.class.getName())) &#123;</span><br><span class=\"line\">\t\t\tSpec&lt;ConditionalOnSingleCandidate&gt; spec = <span class=\"keyword\">new</span> <span class=\"title class_\">SingleCandidateSpec</span>(context, metadata, annotations);</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> <span class=\"variable\">matchResult</span> <span class=\"operator\">=</span> getMatchingBeans(context, spec);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!matchResult.isAllMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().didNotFind(<span class=\"string\">&quot;any beans&quot;</span>).atAll());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasSingleAutowireCandidate(context.getBeanFactory(), matchResult.getNamesOfAllMatches(),</span><br><span class=\"line\">\t\t\t\t\tspec.getStrategy() == SearchStrategy.ALL)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().didNotFind(<span class=\"string\">&quot;a primary bean from beans&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.items(Style.QUOTE, matchResult.getNamesOfAllMatches()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatchMessage = spec.message(matchMessage).found(<span class=\"string\">&quot;a primary bean from beans&quot;</span>).items(Style.QUOTE,</span><br><span class=\"line\">\t\t\t\t\tmatchResult.getNamesOfAllMatches());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (metadata.isAnnotated(ConditionalOnMissingBean.class.getName())) &#123;</span><br><span class=\"line\">\t\t\tSpec&lt;ConditionalOnMissingBean&gt; spec = <span class=\"keyword\">new</span> <span class=\"title class_\">Spec</span>&lt;&gt;(context, metadata, annotations,</span><br><span class=\"line\">\t\t\t\t\tConditionalOnMissingBean.class);</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> <span class=\"variable\">matchResult</span> <span class=\"operator\">=</span> getMatchingBeans(context, spec);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (matchResult.isAnyMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">reason</span> <span class=\"operator\">=</span> createOnMissingBeanNoMatchReason(matchResult);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ConditionOutcome.noMatch(spec.message().because(reason));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatchMessage = spec.message(matchMessage).didNotFind(<span class=\"string\">&quot;any beans&quot;</span>).atAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ConditionOutcome.match(matchMessage);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那就去看看父类吧，果然最终在<code>FilteringSpringBootCondition</code>父类<code>SpringBootCondition</code>里找到了答案</p>\n<p>可以看到Spring对<code>matches()</code>方法进行了一层的封装，在<code>SpringBootCondition</code>里<code>matches()</code>方法会调用抽象的<code>getMatchOutcome</code>(有种模版模式的感觉)，子类只需要实现<code>getMatchOutcome()</code>就行了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Condition</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">classOrMethodName</span> <span class=\"operator\">=</span> getClassOrMethodName(metadata);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">ConditionOutcome</span> <span class=\"variable\">outcome</span> <span class=\"operator\">=</span> getMatchOutcome(context, metadata);</span><br><span class=\"line\">\t\t\tlogOutcome(classOrMethodName, outcome);</span><br><span class=\"line\">\t\t\trecordEvaluation(context, classOrMethodName, outcome);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> outcome.isMatch();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (NoClassDefFoundError ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Could not evaluate condition on &quot;</span> + classOrMethodName + <span class=\"string\">&quot; due to &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ ex.getMessage() + <span class=\"string\">&quot; not found. Make sure your own configuration does not rely on &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;that class. This can also happen if you are &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;@ComponentScanning a springframework package (e.g. if you &quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ <span class=\"string\">&quot;put a @ComponentScan in the default package by mistake)&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (RuntimeException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Error processing condition on &quot;</span> + getName(metadata), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Profile\"><a href=\"#2-Profile\" class=\"headerlink\" title=\"2. Profile\"></a>2. Profile</h3><p>除了Conditional，Spring中还有<code>@profile</code>注解来根据环境来注入Bean。</p>\n<p><strong>Environment</strong>（环境）:Spring会把一些信息封装到Environment对象中，比如application.properties中的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承PropertyResolver来解析资源</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Environment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PropertyResolver</span> &#123;</span><br><span class=\"line\">    String[] getActiveProfiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] getDefaultProfiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">acceptsProfiles</span><span class=\"params\">(String... var1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">acceptsProfiles</span><span class=\"params\">(Profiles var1)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试，别忘了把Configuration路径改回来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebTestApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*需要再容器refresh()之前传入profile值，可以在启动前设置参数`-DSpring.profiles.active=ruizhi`，这里就直接new一个context了*/</span></span><br><span class=\"line\">        <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>();</span><br><span class=\"line\">        ctx.getEnvironment().setActiveProfiles(<span class=\"string\">&quot;ruizhi&quot;</span>);</span><br><span class=\"line\">        ctx.register(ImportConfiguration.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\">        String[] beanNamesForType = ctx.getBeanNamesForType(User.class);</span><br><span class=\"line\">        System.out.println(beanNamesForType[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加上profile注解，(可以更改值，自行观察是否注入User)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImportConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile(&quot;ruizhi&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setId(<span class=\"number\">36L</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;ruizhi&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-SpringBoot自动装配\"><a href=\"#2-SpringBoot自动装配\" class=\"headerlink\" title=\"2. SpringBoot自动装配\"></a>2. SpringBoot自动装配</h1><p>点开注解<code>@SpringBootApplication</code>，你会发现上面标注了一个<code>@EnableAutoConfiguration</code>（允许自动装配）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Environment property that can be used to override when auto-configuration is</span></span><br><span class=\"line\"><span class=\"comment\">\t * enabled.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the classes to exclude</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class=\"line\"><span class=\"comment\">\t * applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the class names to exclude</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 1.3.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>EnableAutoConfiguration</code>导入了<code>AutoConfigurationImportSelector.class</code>，继续深入看看</p>\n<h2 id=\"2-1-AutoConfigurationImportSelector\"><a href=\"#2-1-AutoConfigurationImportSelector\" class=\"headerlink\" title=\"2.1 AutoConfigurationImportSelector\"></a>2.1 AutoConfigurationImportSelector</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模块装配中导入Selector的方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AutoConfigurationImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DeferredImportSelector</span>, BeanClassLoaderAware,</span><br><span class=\"line\">\t\tResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">          ...    </span><br><span class=\"line\">     <span class=\"comment\">//只要在这个方法返回类的全限定名就行了</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> NO_IMPORTS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">         <span class=\"comment\">//加载自动配置类，拿到类的全限定名</span></span><br><span class=\"line\">\t\t<span class=\"type\">AutoConfigurationEntry</span> <span class=\"variable\">autoConfigurationEntry</span> <span class=\"operator\">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">     <span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title function_\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> getAttributes(annotationMetadata);</span><br><span class=\"line\">         <span class=\"comment\">//加载候选类</span></span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tconfigurations = removeDuplicates(configurations);</span><br><span class=\"line\">\t\tSet&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">\t\tcheckExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">\t\tconfigurations.removeAll(exclusions);</span><br><span class=\"line\">\t\tconfigurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">\t\tfireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">      <span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title function_\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//通过SpringFactoriesLoader加载类名</span></span><br><span class=\"line\">\t\tList&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">\t\t\t\tgetBeanClassLoader());</span><br><span class=\"line\">\t\tAssert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到经过层层封装，Spring把具体加载的过程委托给了<strong>SpringFactoriesLoader</strong>类，（终于可以到具体的加载逻辑了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringFactoriesLoader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FACTORIES_RESOURCE_LOCATION</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;META-INF/spring.factories&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">loadFactoryNames</span><span class=\"params\">(Class&lt;?&gt; factoryType, <span class=\"meta\">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//factoryTypeName是EnableAutoConfiguration</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">factoryTypeName</span> <span class=\"operator\">=</span> factoryType.getName();</span><br><span class=\"line\">        <span class=\"comment\">//封装成Map，返回key是EnableAutoConfiguration的类名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class=\"title function_\">loadSpringFactories</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">\t\tMultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//加载路径就是META-INF/spring.factories</span></span><br><span class=\"line\">\t\t\tEnumeration&lt;URL&gt; urls = (classLoader != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">\t\t\t\t\tclassLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class=\"line\">\t\t\t\t\tClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class=\"line\">\t\t\tresult = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//遍历文件并把它放到缓存里</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> urls.nextElement();</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">UrlResource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlResource</span>(url);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">factoryTypeName</span> <span class=\"operator\">=</span> ((String) entry.getKey()).trim();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tresult.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcache.put(classLoader, result);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class=\"line\">\t\t\t\t\tFACTORIES_RESOURCE_LOCATION + <span class=\"string\">&quot;]&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上述过程我们也就可以想到Spring加载Starter，也是加载了starter资源目录下<code>META-INF/spring.factories</code>文件，当然自定义Starter也可以通过编写这一文件将需要的Bean导入到容器中。</p>\n<h2 id=\"2-2-AutoConfigurationPackage\"><a href=\"#2-2-AutoConfigurationPackage\" class=\"headerlink\" title=\"2.2 @AutoConfigurationPackage\"></a>2.2 @AutoConfigurationPackage</h2><p>先点进去看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoConfigurationPackage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Base packages that should be registered with &#123;<span class=\"doctag\">@link</span> AutoConfigurationPackages&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Use &#123;<span class=\"doctag\">@link</span> #basePackageClasses&#125; for a type-safe alternative to String-based package</span></span><br><span class=\"line\"><span class=\"comment\">\t * names.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the back package names</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.3.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString[] basePackages() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Type-safe alternative to &#123;<span class=\"doctag\">@link</span> #basePackages&#125; for specifying the packages to be</span></span><br><span class=\"line\"><span class=\"comment\">\t * registered with &#123;<span class=\"doctag\">@link</span> AutoConfigurationPackages&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Consider creating a special no-op marker class or interface in each package that</span></span><br><span class=\"line\"><span class=\"comment\">\t * serves no purpose other than being referenced by this attribute.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the base package classes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.3.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;?&gt;[] basePackageClasses() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>AutoConfigurationPackage</code>上面还有一个Import注解，导入了<code>AutoConfigurationPackages.Registrar.class</code>，继续往下看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模块装配中导入BeanDefinition的方式</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Registrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用外部的register方法，AnnotationMetadata是被标注注解的类的元信息（这里主要是为了获取主类包名）</span></span><br><span class=\"line\">            <span class=\"comment\">//关于AnnotationMetadata以及BeanDefinitionRegistry的相关信息自行查阅</span></span><br><span class=\"line\">\t\t\tregister(registry, <span class=\"keyword\">new</span> <span class=\"title class_\">PackageImports</span>(metadata).getPackageNames().toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title function_\">determineImports</span><span class=\"params\">(AnnotationMetadata metadata)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Collections.singleton(<span class=\"keyword\">new</span> <span class=\"title class_\">PackageImports</span>(metadata));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是PackageImports是什么？点进去看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PackageImports</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; packageNames;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPackageImports(AnnotationMetadata metadata) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> AnnotationAttributes</span><br><span class=\"line\">\t\t\t\t\t.fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), <span class=\"literal\">false</span>));</span><br><span class=\"line\">\t\t\tList&lt;String&gt; packageNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//判断自己有没有配置basePackages</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String basePackage : attributes.getStringArray(<span class=\"string\">&quot;basePackages&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tpackageNames.add(basePackage);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Class&lt;?&gt; basePackageClass : attributes.getClassArray(<span class=\"string\">&quot;basePackageClasses&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tpackageNames.add(basePackageClass.getPackage().getName());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">//默认空的会自动添加类的包路径</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (packageNames.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tpackageNames.add(ClassUtils.getPackageName(metadata.getClassName()));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.packageNames = Collections.unmodifiableList(packageNames);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p><code>@SpringBootApplication</code>上标注了<code>@EnableAutoConfiguration</code>，这自动装配的起点。</p>\n<ol>\n<li><p>导入starter及Spring运行需要的类</p>\n<ul>\n<li><p><code>@EnableAutoConfiguration </code>上标注了<code>@Import(AutoConfigurationImportSelector.class)</code></p>\n</li>\n<li><p>根据模块装配规则<code>AutoConfigurationImportSelector</code>的父类实现了<code>ImportSelector</code>接口，重写了<code>selectImports()</code>方法。</p>\n</li>\n<li><p>Spring内部通过层层过滤，最终委托给<code>SpringFactoriesLoader</code>中<code>loadFactoryNames()</code>方法来调用<code>loadSpringFactories()</code>，并过滤返回值key是<code>EnableAutoConfiguration</code>的value</p>\n</li>\n<li><p><code>loadSpringFactories()</code>方法会解析资源目录下”META-INF&#x2F;spring.factories”文件，并将数据封装成Map类型</p>\n</li>\n<li><p>之后将得到的数据层层返回上去，在selectImports()返回要加载的类名（也就是META-INF&#x2F;spring.factories文件中定义的EnableAutoConfiguration的类）</p>\n</li>\n</ul>\n</li>\n<li><p>导入自己编写的Bean</p>\n<ul>\n<li><code>@AutoConfigurationPackage</code>上标注了<code>@Import(AutoConfigurationPackages.Registrar.class)</code></li>\n<li>根据模块装配规则&#96;&#96;AutoConfigurationPackages.Registrar<code>实现了</code>ImportBeanDefinitionRegistrar<code>接口，重写了</code>registerBeanDefinitions()&#96;方法。</li>\n<li><code>registerBeanDefinitions()</code>会调用<code>register()</code>方法来注册<code>PackageImports</code>中封装的包名</li>\n<li><code>PackageImports</code>会解析是否配置需要扫描的包名，默认是启动类所在包</li>\n</ul>\n</li>\n</ol>"},{"title":"ThreadLocal小结","date":"2024-04-30T06:26:21.000Z","_content":"\n\n\n# ThreadLocal\n\nThreadLocal主要是为了解决多线程间信息隔离的问题（创建副本，用空间换时间）。\n\n```java\n//泛型为需要共享的数据的类型\npublic class ThreadLocal<T> {\n    ...\n}\n```\n\n<!-- more -->\n\n## 简单示例\n\n经典的数据源连接\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DataSourceManager {\n    private static ThreadLocal<Connection> connectionHolder = ThreadLocal.withInitial(() -> {\n        try {\n            // 创建数据库连接\n            return DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"username\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return null;\n        }\n    });\n\n    // 获取当前线程的数据库连接\n    public static Connection getConnection() {\n        return connectionHolder.get();\n    }\n\n    // 关闭当前线程的数据库连接\n    public static void closeConnection() {\n        Connection connection = connectionHolder.get();\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        connectionHolder.remove();\n    }\n\n    public static void main(String[] args) {\n        // 在多个线程中使用数据源连接服务\n        Thread thread1 = new Thread(() -> {\n            Connection connection = DataSourceManager.getConnection();\n            // 执行数据库操作\n            DataSourceManager.closeConnection();\n        });\n\n        Thread thread2 = new Thread(() -> {\n            Connection connection = DataSourceManager.getConnection();\n            // 执行数据库操作\n            DataSourceManager.closeConnection();\n        });\n\n        thread1.start();\n        thread2.start();\n    }\n}\n```\n\n**综述**：\n\n- 不进行信息隔离？那一个线程在进行操作时，另一个线程关闭连接怎么办？\n- 不创建副本？每次操作数据源都加锁？\n- 手动创建副本？有现成的ThreadLocal不用，ThreadLocal还使用弱引用在线程结束时自动释放副本。\n\n## ThreadLocal初始化\n\n```java\n//使用构造函数（对你没有看错，我也没有省略，构造函数是空的）\npublic ThreadLocal() {\n}\n//使用withInitial()，new有初值的ThreadLocal对象(Supplier返回值作为初值)\npublic static <S> ThreadLocal<S> withInitial(Supplier<? extends S> supplier) {\n        return new SuppliedThreadLocal<>(supplier);\n}\n```\n\n## ThreadLocal方法\n\n```java\n//常用的set()设置值和get()获取值,以及使用结束后remove()清除副本\n//new 创建ThreadLocal get之前需要先set，不然会抛空指针异常\n    public T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();\n    }\n\tpublic void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            map.set(this, value);\n        } else {\n            createMap(t, value);\n        }\n\t}\n \tpublic void remove() {\n         ThreadLocalMap m = getMap(Thread.currentThread());\n         if (m != null) {\n             m.remove(this);\n         }\n     }\n\n```\n\n## ThreadLocal原理初探\n\n每个Thread对象里面都有ThreadLocalMap对象（有两个，感兴趣自行查阅），Thread通过ThreadLocalMap来存储每个线程的ThreadLocal对象副本\n\n```java\npublic class Thread implements Runnable {\n    ...\n\t/* ThreadLocal values pertaining to this thread. This map is maintained\n     * by the ThreadLocal class. */\n    ThreadLocal.ThreadLocalMap threadLocals = null;\n\n    /*\n     * InheritableThreadLocal values pertaining to this thread. This map is\n     * maintained by the InheritableThreadLocal class.\n     */\n    ThreadLocal.ThreadLocalMap inheritableThreadLocals = null;\n \t...   \n}\n```\n\n### ThreadLocalMap对象\n\n```java\n//ThreadLocalMap里面的对象及属性\nstatic class ThreadLocalMap {\n\n        /**\n         * The entries in this hash map extend WeakReference, using\n         * its main ref field as the key (which is always a\n         * ThreadLocal object).  Note that null keys (i.e. entry.get()\n         * == null) mean that the key is no longer referenced, so the\n         * entry can be expunged from table.  Such entries are referred to\n         * as \"stale entries\" in the code that follows.\n         */\n        static class Entry extends WeakReference<ThreadLocal<?>> {\n            /** The value associated with this ThreadLocal. */\n            Object value;\n\n            Entry(ThreadLocal<?> k, Object v) {\n                super(k);\n                value = v;\n            }\n        }\n\n        /**\n         * The initial capacity -- MUST be a power of two.\n         */\n        private static final int INITIAL_CAPACITY = 16;\n\n        /**\n         * The table, resized as necessary.\n         * table.length MUST always be a power of two.\n         */\n        private Entry[] table;\n\n        /**\n         * The number of entries in the table.\n         */\n        private int size = 0;\n\n        /**\n         * The next size value at which to resize.\n         */\n        private int threshold; // Default to 0\n     ...\n }\n```\n\n可以看到ThreadLocalMap里面有一个Entry类型的数组，Entry则是内部一个静态的键值对的类。（Map的常见实现方式，数组存储键值对）\n\n### Entry类\n\n键值对的**key**是**ThreadLocal对象实例**，**value**是**ThreadLocal泛型数据实例**。所以ThreadLocal要隔离的数据其实是在使用时存放在线程中的，ThreadLocal主要是充当模版的作用。（有点类和对象的感觉）\n\n可能有人注意到Entry类继承了`WeakReference<ThreadLocal<?>>`，这是什么东西？\n\n（具体省略，感兴趣自行查阅）\n\n四种引用中的弱引用。\n\n```java\n//强引用和弱引用的对比\nstatic class Entry {\n    //作为属性来引用ThreadLocal对象，强引用\n    ThreadLocal<?> k;\n    Object value;\n\n    Entry(ThreadLocal<?> k, Object v) {\n        value = v;\n    }\n}\n//弱引用\n static class Entry extends WeakReference<ThreadLocal<?>> {\n            /** The value associated with this ThreadLocal. */\n            Object value;\n\n            Entry(ThreadLocal<?> k, Object v) {\n                super(k);\n                value = v;\n            }\n        }\n```\n\n#### ThreadLocal引用关系\n\n使用ThreadLocal时，Thread会持有ThreadLocalMap强引用，ThreadLocalMap会持有Entry强引用，Entry会持有ThreadLocal弱引用。\n\n在ThreadLocal不使用时（线程依旧持有ThreadLocalMap），Entry中ThreadLocal对象的**key**会被回收掉，不过由于**value**是强引用，所以会出现**key为null，value有值的无效Entry**。虽然ThreadLocal在`get()`时会检查null值的key然后删除（具体查阅`getEntry()`中`getAfterMisss()`方法），不过如果不显示的调用remove()清除ThreadLocalMap，value的生命会与Thread线程实例绑定。\n\n#### ThreadLocal内存泄漏\n\n原本就算value与Thread生命绑定，在Thread示例销毁时value也会销毁。\n\n但是线程池为了资源的复用，里面的核心线程会一直跑着循环来判断是否有新任务，这就会造成value永远无法回收（也就是内存泄漏的问题），泄漏内存为**线程池核心线程数 × value对象大小**\n\n###  ThreaLocalMap的散列方式\n\nThreadLocal中map使用的是斐波那契散列法，详细见//todo\n\n\n\n\n\n\n\n\n\n","source":"_posts/ThreadLocal小结.md","raw":"---\ntitle: ThreadLocal小结\ndate: 2024-04-30 14:26:21\ntags: \n  - juc\ncategories:\t\n  - 后端开发\n---\n\n\n\n# ThreadLocal\n\nThreadLocal主要是为了解决多线程间信息隔离的问题（创建副本，用空间换时间）。\n\n```java\n//泛型为需要共享的数据的类型\npublic class ThreadLocal<T> {\n    ...\n}\n```\n\n<!-- more -->\n\n## 简单示例\n\n经典的数据源连接\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DataSourceManager {\n    private static ThreadLocal<Connection> connectionHolder = ThreadLocal.withInitial(() -> {\n        try {\n            // 创建数据库连接\n            return DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"username\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return null;\n        }\n    });\n\n    // 获取当前线程的数据库连接\n    public static Connection getConnection() {\n        return connectionHolder.get();\n    }\n\n    // 关闭当前线程的数据库连接\n    public static void closeConnection() {\n        Connection connection = connectionHolder.get();\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        connectionHolder.remove();\n    }\n\n    public static void main(String[] args) {\n        // 在多个线程中使用数据源连接服务\n        Thread thread1 = new Thread(() -> {\n            Connection connection = DataSourceManager.getConnection();\n            // 执行数据库操作\n            DataSourceManager.closeConnection();\n        });\n\n        Thread thread2 = new Thread(() -> {\n            Connection connection = DataSourceManager.getConnection();\n            // 执行数据库操作\n            DataSourceManager.closeConnection();\n        });\n\n        thread1.start();\n        thread2.start();\n    }\n}\n```\n\n**综述**：\n\n- 不进行信息隔离？那一个线程在进行操作时，另一个线程关闭连接怎么办？\n- 不创建副本？每次操作数据源都加锁？\n- 手动创建副本？有现成的ThreadLocal不用，ThreadLocal还使用弱引用在线程结束时自动释放副本。\n\n## ThreadLocal初始化\n\n```java\n//使用构造函数（对你没有看错，我也没有省略，构造函数是空的）\npublic ThreadLocal() {\n}\n//使用withInitial()，new有初值的ThreadLocal对象(Supplier返回值作为初值)\npublic static <S> ThreadLocal<S> withInitial(Supplier<? extends S> supplier) {\n        return new SuppliedThreadLocal<>(supplier);\n}\n```\n\n## ThreadLocal方法\n\n```java\n//常用的set()设置值和get()获取值,以及使用结束后remove()清除副本\n//new 创建ThreadLocal get之前需要先set，不然会抛空指针异常\n    public T get() {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        return setInitialValue();\n    }\n\tpublic void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            map.set(this, value);\n        } else {\n            createMap(t, value);\n        }\n\t}\n \tpublic void remove() {\n         ThreadLocalMap m = getMap(Thread.currentThread());\n         if (m != null) {\n             m.remove(this);\n         }\n     }\n\n```\n\n## ThreadLocal原理初探\n\n每个Thread对象里面都有ThreadLocalMap对象（有两个，感兴趣自行查阅），Thread通过ThreadLocalMap来存储每个线程的ThreadLocal对象副本\n\n```java\npublic class Thread implements Runnable {\n    ...\n\t/* ThreadLocal values pertaining to this thread. This map is maintained\n     * by the ThreadLocal class. */\n    ThreadLocal.ThreadLocalMap threadLocals = null;\n\n    /*\n     * InheritableThreadLocal values pertaining to this thread. This map is\n     * maintained by the InheritableThreadLocal class.\n     */\n    ThreadLocal.ThreadLocalMap inheritableThreadLocals = null;\n \t...   \n}\n```\n\n### ThreadLocalMap对象\n\n```java\n//ThreadLocalMap里面的对象及属性\nstatic class ThreadLocalMap {\n\n        /**\n         * The entries in this hash map extend WeakReference, using\n         * its main ref field as the key (which is always a\n         * ThreadLocal object).  Note that null keys (i.e. entry.get()\n         * == null) mean that the key is no longer referenced, so the\n         * entry can be expunged from table.  Such entries are referred to\n         * as \"stale entries\" in the code that follows.\n         */\n        static class Entry extends WeakReference<ThreadLocal<?>> {\n            /** The value associated with this ThreadLocal. */\n            Object value;\n\n            Entry(ThreadLocal<?> k, Object v) {\n                super(k);\n                value = v;\n            }\n        }\n\n        /**\n         * The initial capacity -- MUST be a power of two.\n         */\n        private static final int INITIAL_CAPACITY = 16;\n\n        /**\n         * The table, resized as necessary.\n         * table.length MUST always be a power of two.\n         */\n        private Entry[] table;\n\n        /**\n         * The number of entries in the table.\n         */\n        private int size = 0;\n\n        /**\n         * The next size value at which to resize.\n         */\n        private int threshold; // Default to 0\n     ...\n }\n```\n\n可以看到ThreadLocalMap里面有一个Entry类型的数组，Entry则是内部一个静态的键值对的类。（Map的常见实现方式，数组存储键值对）\n\n### Entry类\n\n键值对的**key**是**ThreadLocal对象实例**，**value**是**ThreadLocal泛型数据实例**。所以ThreadLocal要隔离的数据其实是在使用时存放在线程中的，ThreadLocal主要是充当模版的作用。（有点类和对象的感觉）\n\n可能有人注意到Entry类继承了`WeakReference<ThreadLocal<?>>`，这是什么东西？\n\n（具体省略，感兴趣自行查阅）\n\n四种引用中的弱引用。\n\n```java\n//强引用和弱引用的对比\nstatic class Entry {\n    //作为属性来引用ThreadLocal对象，强引用\n    ThreadLocal<?> k;\n    Object value;\n\n    Entry(ThreadLocal<?> k, Object v) {\n        value = v;\n    }\n}\n//弱引用\n static class Entry extends WeakReference<ThreadLocal<?>> {\n            /** The value associated with this ThreadLocal. */\n            Object value;\n\n            Entry(ThreadLocal<?> k, Object v) {\n                super(k);\n                value = v;\n            }\n        }\n```\n\n#### ThreadLocal引用关系\n\n使用ThreadLocal时，Thread会持有ThreadLocalMap强引用，ThreadLocalMap会持有Entry强引用，Entry会持有ThreadLocal弱引用。\n\n在ThreadLocal不使用时（线程依旧持有ThreadLocalMap），Entry中ThreadLocal对象的**key**会被回收掉，不过由于**value**是强引用，所以会出现**key为null，value有值的无效Entry**。虽然ThreadLocal在`get()`时会检查null值的key然后删除（具体查阅`getEntry()`中`getAfterMisss()`方法），不过如果不显示的调用remove()清除ThreadLocalMap，value的生命会与Thread线程实例绑定。\n\n#### ThreadLocal内存泄漏\n\n原本就算value与Thread生命绑定，在Thread示例销毁时value也会销毁。\n\n但是线程池为了资源的复用，里面的核心线程会一直跑着循环来判断是否有新任务，这就会造成value永远无法回收（也就是内存泄漏的问题），泄漏内存为**线程池核心线程数 × value对象大小**\n\n###  ThreaLocalMap的散列方式\n\nThreadLocal中map使用的是斐波那契散列法，详细见//todo\n\n\n\n\n\n\n\n\n\n","slug":"ThreadLocal小结","published":1,"updated":"2024-05-09T07:08:55.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw6d4bak0008psus3yhzfb03","content":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>ThreadLocal主要是为了解决多线程间信息隔离的问题（创建副本，用空间换时间）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型为需要共享的数据的类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><p>经典的数据源连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceManager</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Connection&gt; connectionHolder = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建数据库连接</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>, <span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的数据库连接</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connectionHolder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 关闭当前线程的数据库连接</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeConnection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionHolder.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        connectionHolder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在多个线程中使用数据源连接服务</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DataSourceManager.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">// 执行数据库操作</span></span><br><span class=\"line\">            DataSourceManager.closeConnection();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DataSourceManager.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">// 执行数据库操作</span></span><br><span class=\"line\">            DataSourceManager.closeConnection();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>综述</strong>：</p>\n<ul>\n<li>不进行信息隔离？那一个线程在进行操作时，另一个线程关闭连接怎么办？</li>\n<li>不创建副本？每次操作数据源都加锁？</li>\n<li>手动创建副本？有现成的ThreadLocal不用，ThreadLocal还使用弱引用在线程结束时自动释放副本。</li>\n</ul>\n<h2 id=\"ThreadLocal初始化\"><a href=\"#ThreadLocal初始化\" class=\"headerlink\" title=\"ThreadLocal初始化\"></a>ThreadLocal初始化</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用构造函数（对你没有看错，我也没有省略，构造函数是空的）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadLocal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用withInitial()，new有初值的ThreadLocal对象(Supplier返回值作为初值)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ThreadLocal&lt;S&gt; <span class=\"title function_\">withInitial</span><span class=\"params\">(Supplier&lt;? extends S&gt; supplier)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SuppliedThreadLocal</span>&lt;&gt;(supplier);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ThreadLocal方法\"><a href=\"#ThreadLocal方法\" class=\"headerlink\" title=\"ThreadLocal方法\"></a>ThreadLocal方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常用的set()设置值和get()获取值,以及使用结束后remove()清除副本</span></span><br><span class=\"line\"><span class=\"comment\">//new 创建ThreadLocal get之前需要先set，不然会抛空指针异常</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            map.set(<span class=\"built_in\">this</span>, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            createMap(t, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> \t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> getMap(Thread.currentThread());</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (m != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             m.remove(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ThreadLocal原理初探\"><a href=\"#ThreadLocal原理初探\" class=\"headerlink\" title=\"ThreadLocal原理初探\"></a>ThreadLocal原理初探</h2><p>每个Thread对象里面都有ThreadLocalMap对象（有两个，感兴趣自行查阅），Thread通过ThreadLocalMap来存储每个线程的ThreadLocal对象副本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"comment\">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class=\"line\"><span class=\"comment\">     * by the ThreadLocal class. */</span></span><br><span class=\"line\">    ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">threadLocals</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * InheritableThreadLocal values pertaining to this thread. This map is</span></span><br><span class=\"line\"><span class=\"comment\">     * maintained by the InheritableThreadLocal class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">inheritableThreadLocals</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> \t...   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ThreadLocalMap对象\"><a href=\"#ThreadLocalMap对象\" class=\"headerlink\" title=\"ThreadLocalMap对象\"></a>ThreadLocalMap对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ThreadLocalMap里面的对象及属性</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocalMap</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The entries in this hash map extend WeakReference, using</span></span><br><span class=\"line\"><span class=\"comment\">         * its main ref field as the key (which is always a</span></span><br><span class=\"line\"><span class=\"comment\">         * ThreadLocal object).  Note that null keys (i.e. entry.get()</span></span><br><span class=\"line\"><span class=\"comment\">         * == null) mean that the key is no longer referenced, so the</span></span><br><span class=\"line\"><span class=\"comment\">         * entry can be expunged from table.  Such entries are referred to</span></span><br><span class=\"line\"><span class=\"comment\">         * as &quot;stale entries&quot; in the code that follows.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></span><br><span class=\"line\">            Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The initial capacity -- MUST be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">INITIAL_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The table, resized as necessary.</span></span><br><span class=\"line\"><span class=\"comment\">         * table.length MUST always be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Entry[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The number of entries in the table.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The next size value at which to resize.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> threshold; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\">     ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到ThreadLocalMap里面有一个Entry类型的数组，Entry则是内部一个静态的键值对的类。（Map的常见实现方式，数组存储键值对）</p>\n<h3 id=\"Entry类\"><a href=\"#Entry类\" class=\"headerlink\" title=\"Entry类\"></a>Entry类</h3><p>键值对的<strong>key</strong>是<strong>ThreadLocal对象实例</strong>，<strong>value</strong>是<strong>ThreadLocal泛型数据实例</strong>。所以ThreadLocal要隔离的数据其实是在使用时存放在线程中的，ThreadLocal主要是充当模版的作用。（有点类和对象的感觉）</p>\n<p>可能有人注意到Entry类继承了<code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>，这是什么东西？</p>\n<p>（具体省略，感兴趣自行查阅）</p>\n<p>四种引用中的弱引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//强引用和弱引用的对比</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//作为属性来引用ThreadLocal对象，强引用</span></span><br><span class=\"line\">    ThreadLocal&lt;?&gt; k;</span><br><span class=\"line\">    Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">        value = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//弱引用</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></span><br><span class=\"line\">            Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ThreadLocal引用关系\"><a href=\"#ThreadLocal引用关系\" class=\"headerlink\" title=\"ThreadLocal引用关系\"></a>ThreadLocal引用关系</h4><p>使用ThreadLocal时，Thread会持有ThreadLocalMap强引用，ThreadLocalMap会持有Entry强引用，Entry会持有ThreadLocal弱引用。</p>\n<p>在ThreadLocal不使用时（线程依旧持有ThreadLocalMap），Entry中ThreadLocal对象的<strong>key</strong>会被回收掉，不过由于<strong>value</strong>是强引用，所以会出现<strong>key为null，value有值的无效Entry</strong>。虽然ThreadLocal在<code>get()</code>时会检查null值的key然后删除（具体查阅<code>getEntry()</code>中<code>getAfterMisss()</code>方法），不过如果不显示的调用remove()清除ThreadLocalMap，value的生命会与Thread线程实例绑定。</p>\n<h4 id=\"ThreadLocal内存泄漏\"><a href=\"#ThreadLocal内存泄漏\" class=\"headerlink\" title=\"ThreadLocal内存泄漏\"></a>ThreadLocal内存泄漏</h4><p>原本就算value与Thread生命绑定，在Thread示例销毁时value也会销毁。</p>\n<p>但是线程池为了资源的复用，里面的核心线程会一直跑着循环来判断是否有新任务，这就会造成value永远无法回收（也就是内存泄漏的问题），泄漏内存为<strong>线程池核心线程数 × value对象大小</strong></p>\n<h3 id=\"ThreaLocalMap的散列方式\"><a href=\"#ThreaLocalMap的散列方式\" class=\"headerlink\" title=\"ThreaLocalMap的散列方式\"></a>ThreaLocalMap的散列方式</h3><p>ThreadLocal中map使用的是斐波那契散列法，详细见&#x2F;&#x2F;todo</p>\n","site":{"data":{}},"length":1171,"excerpt":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>ThreadLocal主要是为了解决多线程间信息隔离的问题（创建副本，用空间换时间）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型为需要共享的数据的类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><p>经典的数据源连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceManager</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Connection&gt; connectionHolder = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建数据库连接</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>, <span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程的数据库连接</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connectionHolder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 关闭当前线程的数据库连接</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeConnection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionHolder.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        connectionHolder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在多个线程中使用数据源连接服务</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DataSourceManager.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">// 执行数据库操作</span></span><br><span class=\"line\">            DataSourceManager.closeConnection();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DataSourceManager.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">// 执行数据库操作</span></span><br><span class=\"line\">            DataSourceManager.closeConnection();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>综述</strong>：</p>\n<ul>\n<li>不进行信息隔离？那一个线程在进行操作时，另一个线程关闭连接怎么办？</li>\n<li>不创建副本？每次操作数据源都加锁？</li>\n<li>手动创建副本？有现成的ThreadLocal不用，ThreadLocal还使用弱引用在线程结束时自动释放副本。</li>\n</ul>\n<h2 id=\"ThreadLocal初始化\"><a href=\"#ThreadLocal初始化\" class=\"headerlink\" title=\"ThreadLocal初始化\"></a>ThreadLocal初始化</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用构造函数（对你没有看错，我也没有省略，构造函数是空的）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadLocal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用withInitial()，new有初值的ThreadLocal对象(Supplier返回值作为初值)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ThreadLocal&lt;S&gt; <span class=\"title function_\">withInitial</span><span class=\"params\">(Supplier&lt;? extends S&gt; supplier)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SuppliedThreadLocal</span>&lt;&gt;(supplier);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ThreadLocal方法\"><a href=\"#ThreadLocal方法\" class=\"headerlink\" title=\"ThreadLocal方法\"></a>ThreadLocal方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常用的set()设置值和get()获取值,以及使用结束后remove()清除副本</span></span><br><span class=\"line\"><span class=\"comment\">//new 创建ThreadLocal get之前需要先set，不然会抛空指针异常</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            map.set(<span class=\"built_in\">this</span>, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            createMap(t, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> \t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> getMap(Thread.currentThread());</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (m != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             m.remove(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ThreadLocal原理初探\"><a href=\"#ThreadLocal原理初探\" class=\"headerlink\" title=\"ThreadLocal原理初探\"></a>ThreadLocal原理初探</h2><p>每个Thread对象里面都有ThreadLocalMap对象（有两个，感兴趣自行查阅），Thread通过ThreadLocalMap来存储每个线程的ThreadLocal对象副本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"comment\">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class=\"line\"><span class=\"comment\">     * by the ThreadLocal class. */</span></span><br><span class=\"line\">    ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">threadLocals</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * InheritableThreadLocal values pertaining to this thread. This map is</span></span><br><span class=\"line\"><span class=\"comment\">     * maintained by the InheritableThreadLocal class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">inheritableThreadLocals</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> \t...   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ThreadLocalMap对象\"><a href=\"#ThreadLocalMap对象\" class=\"headerlink\" title=\"ThreadLocalMap对象\"></a>ThreadLocalMap对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ThreadLocalMap里面的对象及属性</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocalMap</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The entries in this hash map extend WeakReference, using</span></span><br><span class=\"line\"><span class=\"comment\">         * its main ref field as the key (which is always a</span></span><br><span class=\"line\"><span class=\"comment\">         * ThreadLocal object).  Note that null keys (i.e. entry.get()</span></span><br><span class=\"line\"><span class=\"comment\">         * == null) mean that the key is no longer referenced, so the</span></span><br><span class=\"line\"><span class=\"comment\">         * entry can be expunged from table.  Such entries are referred to</span></span><br><span class=\"line\"><span class=\"comment\">         * as &quot;stale entries&quot; in the code that follows.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></span><br><span class=\"line\">            Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The initial capacity -- MUST be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">INITIAL_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The table, resized as necessary.</span></span><br><span class=\"line\"><span class=\"comment\">         * table.length MUST always be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Entry[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The number of entries in the table.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The next size value at which to resize.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> threshold; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\">     ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到ThreadLocalMap里面有一个Entry类型的数组，Entry则是内部一个静态的键值对的类。（Map的常见实现方式，数组存储键值对）</p>\n<h3 id=\"Entry类\"><a href=\"#Entry类\" class=\"headerlink\" title=\"Entry类\"></a>Entry类</h3><p>键值对的<strong>key</strong>是<strong>ThreadLocal对象实例</strong>，<strong>value</strong>是<strong>ThreadLocal泛型数据实例</strong>。所以ThreadLocal要隔离的数据其实是在使用时存放在线程中的，ThreadLocal主要是充当模版的作用。（有点类和对象的感觉）</p>\n<p>可能有人注意到Entry类继承了<code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>，这是什么东西？</p>\n<p>（具体省略，感兴趣自行查阅）</p>\n<p>四种引用中的弱引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//强引用和弱引用的对比</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//作为属性来引用ThreadLocal对象，强引用</span></span><br><span class=\"line\">    ThreadLocal&lt;?&gt; k;</span><br><span class=\"line\">    Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">        value = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//弱引用</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></span><br><span class=\"line\">            Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ThreadLocal引用关系\"><a href=\"#ThreadLocal引用关系\" class=\"headerlink\" title=\"ThreadLocal引用关系\"></a>ThreadLocal引用关系</h4><p>使用ThreadLocal时，Thread会持有ThreadLocalMap强引用，ThreadLocalMap会持有Entry强引用，Entry会持有ThreadLocal弱引用。</p>\n<p>在ThreadLocal不使用时（线程依旧持有ThreadLocalMap），Entry中ThreadLocal对象的<strong>key</strong>会被回收掉，不过由于<strong>value</strong>是强引用，所以会出现<strong>key为null，value有值的无效Entry</strong>。虽然ThreadLocal在<code>get()</code>时会检查null值的key然后删除（具体查阅<code>getEntry()</code>中<code>getAfterMisss()</code>方法），不过如果不显示的调用remove()清除ThreadLocalMap，value的生命会与Thread线程实例绑定。</p>\n<h4 id=\"ThreadLocal内存泄漏\"><a href=\"#ThreadLocal内存泄漏\" class=\"headerlink\" title=\"ThreadLocal内存泄漏\"></a>ThreadLocal内存泄漏</h4><p>原本就算value与Thread生命绑定，在Thread示例销毁时value也会销毁。</p>\n<p>但是线程池为了资源的复用，里面的核心线程会一直跑着循环来判断是否有新任务，这就会造成value永远无法回收（也就是内存泄漏的问题），泄漏内存为<strong>线程池核心线程数 × value对象大小</strong></p>\n<h3 id=\"ThreaLocalMap的散列方式\"><a href=\"#ThreaLocalMap的散列方式\" class=\"headerlink\" title=\"ThreaLocalMap的散列方式\"></a>ThreaLocalMap的散列方式</h3><p>ThreadLocal中map使用的是斐波那契散列法，详细见&#x2F;&#x2F;todo</p>"},{"title":"java两锁之一的synchronized","date":"2024-05-08T01:02:00.000Z","_content":"\n多线程可以提升任务的执行效率，但是多线程由于隔离程度不够，会出现多个线程同时操作同一变量使得变量值不可控的情况，也就是线程安全问题。\n\n**线程安全问题出现的场景**：\n\n+ 多线程环境\n+ 有共享数据\n+ 有多条语句操作共享数据/单条语句本身非原子操作（比如i++虽然是单条语句，但并非原子操作）\n\n一般来说解决问题就是需要破坏三个条件中的一个，锁就是将多线程访问变量的过程串行化，破坏多线程环境。另外还可以通过创建副本的方法来破坏第二个条件，lua脚本将多个redis操作合并成原子操作破坏第三个条件。\n\njava中锁的实现有两种，分别是基于`Monitor`的`synchronized`和基于`AQS`的`ReentrantLock`，这篇文章先来总结一下synchronized的使用与实现\n\n<!--more-->\n\n# 1. synchronized的使用\n\n## 1.1 经典的单例模式\n\n为了保证类只有一个实例，需要保证只有一个线程能使用Class文件创建类对象，这样就可以对`SingletonPattern.class`加锁，保证资源独享。\n\n```java\npublic class SingletonPattern {\n    //volatile 用于禁止JVM指令重排\n    public static volatile SingletonPattern INSTANCE;\n    public SingletonPattern getINSTANCE() {\n        if(INSTANCE == null){\n            synchronized (SingletonPattern.class){\n                if(INSTANCE == null){\n                    //具体的初始化逻辑\n                    INSTANCE = new SingletonPattern();\n                    try{\n                        Thread.sleep(350L);\n                    }catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return INSTANCE;\n    }\n}\n```\n\n## 1.2 用法\n\nsynchronized用法一般可以分为两大类，对方法进行同步和对代码块进行同步。\n\n1. 代码块\n\n   ```java\n   public static void main(String[] args) throws InterruptedException {\n           Object o = new Object();\n           Thread t1 = new Thread(() -> {\n               //对对象进行加锁\n               synchronized (o) {\n                   System.out.println(\"test1\");\n               }\n           });\n           Thread t2 = new Thread(() -> {\n               synchronized (o) {\n                   System.out.println(\"test2\");\n               }\n           });\n           t1.start();\n           t2.start();\n           t1.join();\n           t2.join();\n       }\n   ```\n\n   ```class\n    0 aload_0\n    1 dup\n    2 astore_1\n    3 monitorenter\n    4 getstatic #25 <java/lang/System.out : Ljava/io/PrintStream;>\n    7 ldc #39 <test2>\n    9 invokevirtual #33 <java/io/PrintStream.println : (Ljava/lang/String;)V>\n   12 aload_1\n   13 monitorexit\n   14 goto 22 (+8)\n   17 astore_2\n   18 aload_1\n   19 monitorexit\n   20 aload_2\n   21 athrow\n   22 return\n   ```\n\n   字节码可以看到代码块通过**monitorenter**和**monitorexit**来实现加锁和释放锁\n\n2. 方法\n\n   ```java\n   public static void main(String[] args) throws InterruptedException {\n           test();\n   }\n   //对方法进行加锁\n   public static synchronized void test() {\n           System.out.println(\"test1\");\n   }\n   ```\n   \n   ```java\n   //观察字节码方法同步是通过设置标志ACC_SYNCHRONIZED来实现的,(方法中没有monitorenter等同步字节码)\n   public static synchronized void test();\n       descriptor: ()V\n       flags: (0x0029) ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED\n       Code:\n         stack=2, locals=0, args_size=0\n            0: getstatic     #12                 // Field java/lang/System.out:Ljava/io/PrintStream;\n            3: ldc           #18                 // String test1\n            5: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n            8: return\n         LineNumberTable:\n           line 12: 0\n           line 13: 8\n   }\n   ```\n\n不论是代码块还是方法，synchronized同步都是针对对象进行的。代码块直接是操作对象，方法会根据是否是static方法来判断是对class对象还是实例对象进行加锁（static方法属于类而不是实例对象）。\n\n# 2. synchronized的实现\n\n## 2.1 概述\n\n**特性**：原子性、可见性、可重入性、有序性\n\nsynchronized的实现依赖于JVM，java对象在JVM中会按**对象头、实例数据和对齐填充**的形式存储，了解synchronized我们只需要关注对象头就行了。\n\n**对象头结构**：\n\n- **mark-word**：对象标记字段占 4 个字节，用于存储一些列的标记位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。\n\n- **Klass Pointer**：Class 对象的类型指针，Jdk1.8 默认开启指针压缩后为 4 字节，关闭指针压缩（-XX:-UseCompressedOops）后，长度为 8 字节。其指向的位置是对象对应的 Class 对象（其对应的元数据对象）的内存地址。\n\nmark-word在各锁状态的总览：\n\n<img src=\"java两锁之一的synchronized\\jvm_markWord.png\" alt=\"jvm_markWord\" />\n\nmarkWord使用3位来表示对象的五种状态（无锁，偏向锁，轻量锁，重量锁，以及 GC 标记），线程在竞争锁时会判断对象加锁情况进行竞争。\n\n## 2.2 无锁->偏向锁\n\n无锁状态时MarkWord中会存放**HashCode**、**分代年龄**等信息。当一个线程来请求获取锁时,此时MarkWord前54bit会用来表示持有该锁的线程，Epoch表示该锁的版本戳，当该线程再次来访问时可以直接访问，不需要同步。\n\nJDK15之后偏向锁就被弃用了，因为使用锁的场景大多是多个线程竞争的情况，而偏向锁的优势是**可以节省同一个线程多次请求同一锁时同步消耗的资源**，这样一来多个线程竞争时反而会因为偏向锁向轻量级锁转变造成资源的浪费。\n\nJDK8之前可以设置`-XX:-UseBiasedLocking`来禁用偏向锁，另外JVM延迟设置偏向锁，所以下面测试偏向锁需要sleep()或者`-XX:BiasedLockingStartupDelay=0`关闭延迟偏向锁\n\n```java\npublic static void main(String[] args)  throws InterruptedException{\n    TimeUnit.SECONDS.sleep(5);\n        Object o = new Object();\n        synchronized (o){\n            //打印，观察对象加锁情况\n            System.out.println(ClassLayout.parseInstance(o).toPrintable()); \n        }\n    }\n/*\n<!--查看对象头工具-->\n      <dependency>\n          <groupId>org.openjdk.jol</groupId>\n          <artifactId>jol-core</artifactId>\n          <version>0.9</version>\n          <scope>test</scope>\n      </dependency>\n*/\n```\n\n//可以看到加上参数后，对象加的是轻量级锁（观察开头4个字节最后三位，顺序是倒过来的，所以最后8位是`c8`，最后两位是00）\n\n<img src=\"java两锁之一的synchronized\\image-20240513145730228.png\" alt=\"image-20240513145730228\" />\n\n//不加参数的情况，最后三位是101，加的是偏向锁\n\n<img src=\"java两锁之一的synchronized\\image-20240513150908609.png\" alt=\"image-20240513150908609\" />\n\n## 2.3 偏向锁->轻量级锁\n\n多个线程竞争同一把锁且竞争不太激烈时，偏向锁会升级为轻量级锁（CAS自旋来获取），虚拟机会在当前线程的栈帧中创建一个LockRecord空间，储存当前锁对象的MarkWord拷贝（主要是为记录了HashCode，分代年龄等内容）。\n\n线程竞争锁时会先将MarkWord复制到栈帧中，之后**通过CAS尝试将锁对象的LockRecord指针指向栈帧中的LockRecord**，并将owner指针指向锁对象的MarkWord，CAS操作成功后将锁对象MarkWord锁字段更新为00，表示轻量级锁。CAS失败后会检查MarkWord中LockRecord指针是否指向当前线程的栈帧，如果是则表明已抢到锁，否则自旋等待。\n\n**概述**：轻量级锁抢占需要维持对象和线程的双向联系，**锁对象的LockRecord需要指向栈帧中的LockRecord**，**栈帧中的owner指针需要指向锁对象的MarkWord**。只有同时满足这两个联系，才算成功加锁。\n\n### LockRecord和owner分别是什么？\n\nLockRecord在openjdk中通过以下两个类来实现\n\n```c++\n// A BasicObjectLock associates a specific Java object with a BasicLock.\n// It is currently embedded in an interpreter frame(在栈的解释帧上分配).\nclass BasicObjectLock {\n  friend class VMStructs;\n private:\n  BasicLock _lock; // 锁\n  oop       _obj; // 持有锁的对象，owner的实现\n};\n\n\nclass BasicLock {\n private:\n  volatile markOop _displaced_header;\n};\n```\n\n当字节码解释器执行monitorenter字节码轻量地锁住一个对象时，就会在获取锁的线程的栈上显式或隐式分配一个lock record。\n\n栈帧中解释帧包含一个区域，该区域保存激活拥有的所有监视器的锁记录。在解释的方法执行期间，该区域根据持有的锁数量增长或缩小。lock record在线程的Interpretered Frame（解释帧）上分配。\n\n其实关于LockRecord只需要知道，**在轻量级锁时JVM会在栈帧中创建一个对象（对象中有着owner指针）来进行线程与加锁对象的双向关联**\n\n## 2.4 轻量级锁->重量级锁\n\n当CAS自旋达到一定次数会变成重量级锁，这时线程会进入ObjectMonitor的阻塞队列中，当锁被释放时会随机从队列中唤醒一个进程持有锁。持有锁的线程执行Object.wait()方法阻塞会转移到**WaitSet**队列，等待被notify()或notifyAll()唤醒后会进入**EntryList**中。\n\n**ObjectMonitor结构**：\n\n```java\nObjectMonitor() {\n\t_header = NULL;\n\t_count = 0; // 记录个数\n\t_waiters = 0,\n\t_recursions = 0; // 线程重入次数\n\t_object = NULL; // 存储 Monitor 对象\n\t_owner = NULL; // 持有当前线程的 owner\n\t_WaitSet = NULL; // 处于 wait 状态的线程，会被加入到 _WaitSet\n\t_WaitSetLock = 0 ;\n\t_Responsible = NULL ;\n\t_succ = NULL ;\n\t_cxq = NULL ; // 单向列表\n\tFreeNext = NULL ;\n\t_EntryList = NULL ; // 处于等待锁 block 状态的线程，会被加入到该列表\n\t_SpinFreq = 0 ;\n\t_SpinClock = 0 ;\n\tOwnerIsThread = 0 ;\n\t_previous_owner_tid = 0;\n}\n```\n\n每个对象都会关联一个ObjectMonitor，java通过ObjectMonitor来管理重量级锁。\n\n<img src=\"java两锁之一的synchronized\\java重量级锁.webp\" alt=\"java重量级锁\" style=\"zoom:80%;\" />\n\n**重量级锁的升级条件**：\n\n1. 从轻量级锁升级为重量级锁的条件： 自旋超过一定次数（默认10次），可以通过`-XX:PreBlockSpin`设置次数\n2. 从无锁/偏向锁直接升级为重量级锁的条件：**调用了object.wait()方法，则会直接升级为重量级锁！**\n\n\n\n\n\n","source":"_posts/java两锁之一的synchronized.md","raw":"---\ntitle: java两锁之一的synchronized\ndate: 2024-05-08 09:02:00\ntags:\n   - java锁\ncategories:\n   - 后端开发\n---\n\n多线程可以提升任务的执行效率，但是多线程由于隔离程度不够，会出现多个线程同时操作同一变量使得变量值不可控的情况，也就是线程安全问题。\n\n**线程安全问题出现的场景**：\n\n+ 多线程环境\n+ 有共享数据\n+ 有多条语句操作共享数据/单条语句本身非原子操作（比如i++虽然是单条语句，但并非原子操作）\n\n一般来说解决问题就是需要破坏三个条件中的一个，锁就是将多线程访问变量的过程串行化，破坏多线程环境。另外还可以通过创建副本的方法来破坏第二个条件，lua脚本将多个redis操作合并成原子操作破坏第三个条件。\n\njava中锁的实现有两种，分别是基于`Monitor`的`synchronized`和基于`AQS`的`ReentrantLock`，这篇文章先来总结一下synchronized的使用与实现\n\n<!--more-->\n\n# 1. synchronized的使用\n\n## 1.1 经典的单例模式\n\n为了保证类只有一个实例，需要保证只有一个线程能使用Class文件创建类对象，这样就可以对`SingletonPattern.class`加锁，保证资源独享。\n\n```java\npublic class SingletonPattern {\n    //volatile 用于禁止JVM指令重排\n    public static volatile SingletonPattern INSTANCE;\n    public SingletonPattern getINSTANCE() {\n        if(INSTANCE == null){\n            synchronized (SingletonPattern.class){\n                if(INSTANCE == null){\n                    //具体的初始化逻辑\n                    INSTANCE = new SingletonPattern();\n                    try{\n                        Thread.sleep(350L);\n                    }catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return INSTANCE;\n    }\n}\n```\n\n## 1.2 用法\n\nsynchronized用法一般可以分为两大类，对方法进行同步和对代码块进行同步。\n\n1. 代码块\n\n   ```java\n   public static void main(String[] args) throws InterruptedException {\n           Object o = new Object();\n           Thread t1 = new Thread(() -> {\n               //对对象进行加锁\n               synchronized (o) {\n                   System.out.println(\"test1\");\n               }\n           });\n           Thread t2 = new Thread(() -> {\n               synchronized (o) {\n                   System.out.println(\"test2\");\n               }\n           });\n           t1.start();\n           t2.start();\n           t1.join();\n           t2.join();\n       }\n   ```\n\n   ```class\n    0 aload_0\n    1 dup\n    2 astore_1\n    3 monitorenter\n    4 getstatic #25 <java/lang/System.out : Ljava/io/PrintStream;>\n    7 ldc #39 <test2>\n    9 invokevirtual #33 <java/io/PrintStream.println : (Ljava/lang/String;)V>\n   12 aload_1\n   13 monitorexit\n   14 goto 22 (+8)\n   17 astore_2\n   18 aload_1\n   19 monitorexit\n   20 aload_2\n   21 athrow\n   22 return\n   ```\n\n   字节码可以看到代码块通过**monitorenter**和**monitorexit**来实现加锁和释放锁\n\n2. 方法\n\n   ```java\n   public static void main(String[] args) throws InterruptedException {\n           test();\n   }\n   //对方法进行加锁\n   public static synchronized void test() {\n           System.out.println(\"test1\");\n   }\n   ```\n   \n   ```java\n   //观察字节码方法同步是通过设置标志ACC_SYNCHRONIZED来实现的,(方法中没有monitorenter等同步字节码)\n   public static synchronized void test();\n       descriptor: ()V\n       flags: (0x0029) ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED\n       Code:\n         stack=2, locals=0, args_size=0\n            0: getstatic     #12                 // Field java/lang/System.out:Ljava/io/PrintStream;\n            3: ldc           #18                 // String test1\n            5: invokevirtual #20                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n            8: return\n         LineNumberTable:\n           line 12: 0\n           line 13: 8\n   }\n   ```\n\n不论是代码块还是方法，synchronized同步都是针对对象进行的。代码块直接是操作对象，方法会根据是否是static方法来判断是对class对象还是实例对象进行加锁（static方法属于类而不是实例对象）。\n\n# 2. synchronized的实现\n\n## 2.1 概述\n\n**特性**：原子性、可见性、可重入性、有序性\n\nsynchronized的实现依赖于JVM，java对象在JVM中会按**对象头、实例数据和对齐填充**的形式存储，了解synchronized我们只需要关注对象头就行了。\n\n**对象头结构**：\n\n- **mark-word**：对象标记字段占 4 个字节，用于存储一些列的标记位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。\n\n- **Klass Pointer**：Class 对象的类型指针，Jdk1.8 默认开启指针压缩后为 4 字节，关闭指针压缩（-XX:-UseCompressedOops）后，长度为 8 字节。其指向的位置是对象对应的 Class 对象（其对应的元数据对象）的内存地址。\n\nmark-word在各锁状态的总览：\n\n<img src=\"java两锁之一的synchronized\\jvm_markWord.png\" alt=\"jvm_markWord\" />\n\nmarkWord使用3位来表示对象的五种状态（无锁，偏向锁，轻量锁，重量锁，以及 GC 标记），线程在竞争锁时会判断对象加锁情况进行竞争。\n\n## 2.2 无锁->偏向锁\n\n无锁状态时MarkWord中会存放**HashCode**、**分代年龄**等信息。当一个线程来请求获取锁时,此时MarkWord前54bit会用来表示持有该锁的线程，Epoch表示该锁的版本戳，当该线程再次来访问时可以直接访问，不需要同步。\n\nJDK15之后偏向锁就被弃用了，因为使用锁的场景大多是多个线程竞争的情况，而偏向锁的优势是**可以节省同一个线程多次请求同一锁时同步消耗的资源**，这样一来多个线程竞争时反而会因为偏向锁向轻量级锁转变造成资源的浪费。\n\nJDK8之前可以设置`-XX:-UseBiasedLocking`来禁用偏向锁，另外JVM延迟设置偏向锁，所以下面测试偏向锁需要sleep()或者`-XX:BiasedLockingStartupDelay=0`关闭延迟偏向锁\n\n```java\npublic static void main(String[] args)  throws InterruptedException{\n    TimeUnit.SECONDS.sleep(5);\n        Object o = new Object();\n        synchronized (o){\n            //打印，观察对象加锁情况\n            System.out.println(ClassLayout.parseInstance(o).toPrintable()); \n        }\n    }\n/*\n<!--查看对象头工具-->\n      <dependency>\n          <groupId>org.openjdk.jol</groupId>\n          <artifactId>jol-core</artifactId>\n          <version>0.9</version>\n          <scope>test</scope>\n      </dependency>\n*/\n```\n\n//可以看到加上参数后，对象加的是轻量级锁（观察开头4个字节最后三位，顺序是倒过来的，所以最后8位是`c8`，最后两位是00）\n\n<img src=\"java两锁之一的synchronized\\image-20240513145730228.png\" alt=\"image-20240513145730228\" />\n\n//不加参数的情况，最后三位是101，加的是偏向锁\n\n<img src=\"java两锁之一的synchronized\\image-20240513150908609.png\" alt=\"image-20240513150908609\" />\n\n## 2.3 偏向锁->轻量级锁\n\n多个线程竞争同一把锁且竞争不太激烈时，偏向锁会升级为轻量级锁（CAS自旋来获取），虚拟机会在当前线程的栈帧中创建一个LockRecord空间，储存当前锁对象的MarkWord拷贝（主要是为记录了HashCode，分代年龄等内容）。\n\n线程竞争锁时会先将MarkWord复制到栈帧中，之后**通过CAS尝试将锁对象的LockRecord指针指向栈帧中的LockRecord**，并将owner指针指向锁对象的MarkWord，CAS操作成功后将锁对象MarkWord锁字段更新为00，表示轻量级锁。CAS失败后会检查MarkWord中LockRecord指针是否指向当前线程的栈帧，如果是则表明已抢到锁，否则自旋等待。\n\n**概述**：轻量级锁抢占需要维持对象和线程的双向联系，**锁对象的LockRecord需要指向栈帧中的LockRecord**，**栈帧中的owner指针需要指向锁对象的MarkWord**。只有同时满足这两个联系，才算成功加锁。\n\n### LockRecord和owner分别是什么？\n\nLockRecord在openjdk中通过以下两个类来实现\n\n```c++\n// A BasicObjectLock associates a specific Java object with a BasicLock.\n// It is currently embedded in an interpreter frame(在栈的解释帧上分配).\nclass BasicObjectLock {\n  friend class VMStructs;\n private:\n  BasicLock _lock; // 锁\n  oop       _obj; // 持有锁的对象，owner的实现\n};\n\n\nclass BasicLock {\n private:\n  volatile markOop _displaced_header;\n};\n```\n\n当字节码解释器执行monitorenter字节码轻量地锁住一个对象时，就会在获取锁的线程的栈上显式或隐式分配一个lock record。\n\n栈帧中解释帧包含一个区域，该区域保存激活拥有的所有监视器的锁记录。在解释的方法执行期间，该区域根据持有的锁数量增长或缩小。lock record在线程的Interpretered Frame（解释帧）上分配。\n\n其实关于LockRecord只需要知道，**在轻量级锁时JVM会在栈帧中创建一个对象（对象中有着owner指针）来进行线程与加锁对象的双向关联**\n\n## 2.4 轻量级锁->重量级锁\n\n当CAS自旋达到一定次数会变成重量级锁，这时线程会进入ObjectMonitor的阻塞队列中，当锁被释放时会随机从队列中唤醒一个进程持有锁。持有锁的线程执行Object.wait()方法阻塞会转移到**WaitSet**队列，等待被notify()或notifyAll()唤醒后会进入**EntryList**中。\n\n**ObjectMonitor结构**：\n\n```java\nObjectMonitor() {\n\t_header = NULL;\n\t_count = 0; // 记录个数\n\t_waiters = 0,\n\t_recursions = 0; // 线程重入次数\n\t_object = NULL; // 存储 Monitor 对象\n\t_owner = NULL; // 持有当前线程的 owner\n\t_WaitSet = NULL; // 处于 wait 状态的线程，会被加入到 _WaitSet\n\t_WaitSetLock = 0 ;\n\t_Responsible = NULL ;\n\t_succ = NULL ;\n\t_cxq = NULL ; // 单向列表\n\tFreeNext = NULL ;\n\t_EntryList = NULL ; // 处于等待锁 block 状态的线程，会被加入到该列表\n\t_SpinFreq = 0 ;\n\t_SpinClock = 0 ;\n\tOwnerIsThread = 0 ;\n\t_previous_owner_tid = 0;\n}\n```\n\n每个对象都会关联一个ObjectMonitor，java通过ObjectMonitor来管理重量级锁。\n\n<img src=\"java两锁之一的synchronized\\java重量级锁.webp\" alt=\"java重量级锁\" style=\"zoom:80%;\" />\n\n**重量级锁的升级条件**：\n\n1. 从轻量级锁升级为重量级锁的条件： 自旋超过一定次数（默认10次），可以通过`-XX:PreBlockSpin`设置次数\n2. 从无锁/偏向锁直接升级为重量级锁的条件：**调用了object.wait()方法，则会直接升级为重量级锁！**\n\n\n\n\n\n","slug":"java两锁之一的synchronized","published":1,"updated":"2024-05-14T06:23:21.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw6d4bak0009psus76r7cfmj","content":"<p>多线程可以提升任务的执行效率，但是多线程由于隔离程度不够，会出现多个线程同时操作同一变量使得变量值不可控的情况，也就是线程安全问题。</p>\n<p><strong>线程安全问题出现的场景</strong>：</p>\n<ul>\n<li>多线程环境</li>\n<li>有共享数据</li>\n<li>有多条语句操作共享数据&#x2F;单条语句本身非原子操作（比如i++虽然是单条语句，但并非原子操作）</li>\n</ul>\n<p>一般来说解决问题就是需要破坏三个条件中的一个，锁就是将多线程访问变量的过程串行化，破坏多线程环境。另外还可以通过创建副本的方法来破坏第二个条件，lua脚本将多个redis操作合并成原子操作破坏第三个条件。</p>\n<p>java中锁的实现有两种，分别是基于<code>Monitor</code>的<code>synchronized</code>和基于<code>AQS</code>的<code>ReentrantLock</code>，这篇文章先来总结一下synchronized的使用与实现</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-synchronized的使用\"><a href=\"#1-synchronized的使用\" class=\"headerlink\" title=\"1. synchronized的使用\"></a>1. synchronized的使用</h1><h2 id=\"1-1-经典的单例模式\"><a href=\"#1-1-经典的单例模式\" class=\"headerlink\" title=\"1.1 经典的单例模式\"></a>1.1 经典的单例模式</h2><p>为了保证类只有一个实例，需要保证只有一个线程能使用Class文件创建类对象，这样就可以对<code>SingletonPattern.class</code>加锁，保证资源独享。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonPattern</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//volatile 用于禁止JVM指令重排</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SingletonPattern INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> SingletonPattern <span class=\"title function_\">getINSTANCE</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(INSTANCE == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonPattern.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(INSTANCE == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//具体的初始化逻辑</span></span><br><span class=\"line\">                    INSTANCE = <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonPattern</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">350L</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-用法\"><a href=\"#1-2-用法\" class=\"headerlink\" title=\"1.2 用法\"></a>1.2 用法</h2><p>synchronized用法一般可以分为两大类，对方法进行同步和对代码块进行同步。</p>\n<ol>\n<li><p>代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//对对象进行加锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0 aload_0</span><br><span class=\"line\"> 1 dup</span><br><span class=\"line\"> 2 astore_1</span><br><span class=\"line\"> 3 monitorenter</span><br><span class=\"line\"> 4 getstatic #25 &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span><br><span class=\"line\"> 7 ldc #39 &lt;test2&gt;</span><br><span class=\"line\"> 9 invokevirtual #33 &lt;java/io/PrintStream.println : (Ljava/lang/String;)V&gt;</span><br><span class=\"line\">12 aload_1</span><br><span class=\"line\">13 monitorexit</span><br><span class=\"line\">14 goto 22 (+8)</span><br><span class=\"line\">17 astore_2</span><br><span class=\"line\">18 aload_1</span><br><span class=\"line\">19 monitorexit</span><br><span class=\"line\">20 aload_2</span><br><span class=\"line\">21 athrow</span><br><span class=\"line\">22 return</span><br></pre></td></tr></table></figure>\n\n<p>字节码可以看到代码块通过<strong>monitorenter</strong>和<strong>monitorexit</strong>来实现加锁和释放锁</p>\n</li>\n<li><p>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对方法进行加锁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//观察字节码方法同步是通过设置标志ACC_SYNCHRONIZED来实现的,(方法中没有monitorenter等同步字节码)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0029</span>) ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: getstatic     #<span class=\"number\">12</span>                 <span class=\"comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: ldc           #<span class=\"number\">18</span>                 <span class=\"comment\">// String test1</span></span><br><span class=\"line\">         <span class=\"number\">5</span>: invokevirtual #<span class=\"number\">20</span>                 <span class=\"comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">         <span class=\"number\">8</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">12</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">13</span>: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>不论是代码块还是方法，synchronized同步都是针对对象进行的。代码块直接是操作对象，方法会根据是否是static方法来判断是对class对象还是实例对象进行加锁（static方法属于类而不是实例对象）。</p>\n<h1 id=\"2-synchronized的实现\"><a href=\"#2-synchronized的实现\" class=\"headerlink\" title=\"2. synchronized的实现\"></a>2. synchronized的实现</h1><h2 id=\"2-1-概述\"><a href=\"#2-1-概述\" class=\"headerlink\" title=\"2.1 概述\"></a>2.1 概述</h2><p><strong>特性</strong>：原子性、可见性、可重入性、有序性</p>\n<p>synchronized的实现依赖于JVM，java对象在JVM中会按<strong>对象头、实例数据和对齐填充</strong>的形式存储，了解synchronized我们只需要关注对象头就行了。</p>\n<p><strong>对象头结构</strong>：</p>\n<ul>\n<li><p><strong>mark-word</strong>：对象标记字段占 4 个字节，用于存储一些列的标记位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。</p>\n</li>\n<li><p><strong>Klass Pointer</strong>：Class 对象的类型指针，Jdk1.8 默认开启指针压缩后为 4 字节，关闭指针压缩（-XX:-UseCompressedOops）后，长度为 8 字节。其指向的位置是对象对应的 Class 对象（其对应的元数据对象）的内存地址。</p>\n</li>\n</ul>\n<p>mark-word在各锁状态的总览：</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/jvm_markWord.png\" alt=\"jvm_markWord\">\n\n<p>markWord使用3位来表示对象的五种状态（无锁，偏向锁，轻量锁，重量锁，以及 GC 标记），线程在竞争锁时会判断对象加锁情况进行竞争。</p>\n<h2 id=\"2-2-无锁-偏向锁\"><a href=\"#2-2-无锁-偏向锁\" class=\"headerlink\" title=\"2.2 无锁-&gt;偏向锁\"></a>2.2 无锁-&gt;偏向锁</h2><p>无锁状态时MarkWord中会存放<strong>HashCode</strong>、<strong>分代年龄</strong>等信息。当一个线程来请求获取锁时,此时MarkWord前54bit会用来表示持有该锁的线程，Epoch表示该锁的版本戳，当该线程再次来访问时可以直接访问，不需要同步。</p>\n<p>JDK15之后偏向锁就被弃用了，因为使用锁的场景大多是多个线程竞争的情况，而偏向锁的优势是<strong>可以节省同一个线程多次请求同一锁时同步消耗的资源</strong>，这样一来多个线程竞争时反而会因为偏向锁向轻量级锁转变造成资源的浪费。</p>\n<p>JDK8之前可以设置<code>-XX:-UseBiasedLocking</code>来禁用偏向锁，另外JVM延迟设置偏向锁，所以下面测试偏向锁需要sleep()或者<code>-XX:BiasedLockingStartupDelay=0</code>关闭延迟偏向锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span> InterruptedException&#123;</span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (o)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印，观察对象加锁情况</span></span><br><span class=\"line\">            System.out.println(ClassLayout.parseInstance(o).toPrintable()); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--查看对象头工具--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;version&gt;0.9&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;可以看到加上参数后，对象加的是轻量级锁（观察开头4个字节最后三位，顺序是倒过来的，所以最后8位是<code>c8</code>，最后两位是00）</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/image-20240513145730228.png\" alt=\"image-20240513145730228\">\n\n<p>&#x2F;&#x2F;不加参数的情况，最后三位是101，加的是偏向锁</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/image-20240513150908609.png\" alt=\"image-20240513150908609\">\n\n<h2 id=\"2-3-偏向锁-轻量级锁\"><a href=\"#2-3-偏向锁-轻量级锁\" class=\"headerlink\" title=\"2.3 偏向锁-&gt;轻量级锁\"></a>2.3 偏向锁-&gt;轻量级锁</h2><p>多个线程竞争同一把锁且竞争不太激烈时，偏向锁会升级为轻量级锁（CAS自旋来获取），虚拟机会在当前线程的栈帧中创建一个LockRecord空间，储存当前锁对象的MarkWord拷贝（主要是为记录了HashCode，分代年龄等内容）。</p>\n<p>线程竞争锁时会先将MarkWord复制到栈帧中，之后<strong>通过CAS尝试将锁对象的LockRecord指针指向栈帧中的LockRecord</strong>，并将owner指针指向锁对象的MarkWord，CAS操作成功后将锁对象MarkWord锁字段更新为00，表示轻量级锁。CAS失败后会检查MarkWord中LockRecord指针是否指向当前线程的栈帧，如果是则表明已抢到锁，否则自旋等待。</p>\n<p><strong>概述</strong>：轻量级锁抢占需要维持对象和线程的双向联系，<strong>锁对象的LockRecord需要指向栈帧中的LockRecord</strong>，<strong>栈帧中的owner指针需要指向锁对象的MarkWord</strong>。只有同时满足这两个联系，才算成功加锁。</p>\n<h3 id=\"LockRecord和owner分别是什么？\"><a href=\"#LockRecord和owner分别是什么？\" class=\"headerlink\" title=\"LockRecord和owner分别是什么？\"></a>LockRecord和owner分别是什么？</h3><p>LockRecord在openjdk中通过以下两个类来实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A BasicObjectLock associates a specific Java object with a BasicLock.</span></span><br><span class=\"line\"><span class=\"comment\">// It is currently embedded in an interpreter frame(在栈的解释帧上分配).</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicObjectLock</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VMStructs</span>;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  BasicLock _lock; <span class=\"comment\">// 锁</span></span><br><span class=\"line\">  oop       _obj; <span class=\"comment\">// 持有锁的对象，owner的实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicLock</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> markOop _displaced_header;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当字节码解释器执行monitorenter字节码轻量地锁住一个对象时，就会在获取锁的线程的栈上显式或隐式分配一个lock record。</p>\n<p>栈帧中解释帧包含一个区域，该区域保存激活拥有的所有监视器的锁记录。在解释的方法执行期间，该区域根据持有的锁数量增长或缩小。lock record在线程的Interpretered Frame（解释帧）上分配。</p>\n<p>其实关于LockRecord只需要知道，<strong>在轻量级锁时JVM会在栈帧中创建一个对象（对象中有着owner指针）来进行线程与加锁对象的双向关联</strong></p>\n<h2 id=\"2-4-轻量级锁-重量级锁\"><a href=\"#2-4-轻量级锁-重量级锁\" class=\"headerlink\" title=\"2.4 轻量级锁-&gt;重量级锁\"></a>2.4 轻量级锁-&gt;重量级锁</h2><p>当CAS自旋达到一定次数会变成重量级锁，这时线程会进入ObjectMonitor的阻塞队列中，当锁被释放时会随机从队列中唤醒一个进程持有锁。持有锁的线程执行Object.wait()方法阻塞会转移到<strong>WaitSet</strong>队列，等待被notify()或notifyAll()唤醒后会进入<strong>EntryList</strong>中。</p>\n<p><strong>ObjectMonitor结构</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMonitor() &#123;</span><br><span class=\"line\">\t_header = NULL;</span><br><span class=\"line\">\t_count = <span class=\"number\">0</span>; <span class=\"comment\">// 记录个数</span></span><br><span class=\"line\">\t_waiters = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t_recursions = <span class=\"number\">0</span>; <span class=\"comment\">// 线程重入次数</span></span><br><span class=\"line\">\t_object = NULL; <span class=\"comment\">// 存储 Monitor 对象</span></span><br><span class=\"line\">\t_owner = NULL; <span class=\"comment\">// 持有当前线程的 owner</span></span><br><span class=\"line\">\t_WaitSet = NULL; <span class=\"comment\">// 处于 wait 状态的线程，会被加入到 _WaitSet</span></span><br><span class=\"line\">\t_WaitSetLock = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t_Responsible = NULL ;</span><br><span class=\"line\">\t_succ = NULL ;</span><br><span class=\"line\">\t_cxq = NULL ; <span class=\"comment\">// 单向列表</span></span><br><span class=\"line\">\tFreeNext = NULL ;</span><br><span class=\"line\">\t_EntryList = NULL ; <span class=\"comment\">// 处于等待锁 block 状态的线程，会被加入到该列表</span></span><br><span class=\"line\">\t_SpinFreq = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t_SpinClock = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\tOwnerIsThread = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t_previous_owner_tid = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个对象都会关联一个ObjectMonitor，java通过ObjectMonitor来管理重量级锁。</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/java重量级锁.webp\" alt=\"java重量级锁\" style=\"zoom:80%;\">\n\n<p><strong>重量级锁的升级条件</strong>：</p>\n<ol>\n<li>从轻量级锁升级为重量级锁的条件： 自旋超过一定次数（默认10次），可以通过<code>-XX:PreBlockSpin</code>设置次数</li>\n<li>从无锁&#x2F;偏向锁直接升级为重量级锁的条件：<strong>调用了object.wait()方法，则会直接升级为重量级锁！</strong></li>\n</ol>\n","site":{"data":{}},"length":2192,"excerpt":"<p>多线程可以提升任务的执行效率，但是多线程由于隔离程度不够，会出现多个线程同时操作同一变量使得变量值不可控的情况，也就是线程安全问题。</p>\n<p><strong>线程安全问题出现的场景</strong>：</p>\n<ul>\n<li>多线程环境</li>\n<li>有共享数据</li>\n<li>有多条语句操作共享数据&#x2F;单条语句本身非原子操作（比如i++虽然是单条语句，但并非原子操作）</li>\n</ul>\n<p>一般来说解决问题就是需要破坏三个条件中的一个，锁就是将多线程访问变量的过程串行化，破坏多线程环境。另外还可以通过创建副本的方法来破坏第二个条件，lua脚本将多个redis操作合并成原子操作破坏第三个条件。</p>\n<p>java中锁的实现有两种，分别是基于<code>Monitor</code>的<code>synchronized</code>和基于<code>AQS</code>的<code>ReentrantLock</code>，这篇文章先来总结一下synchronized的使用与实现</p>","more":"<h1 id=\"1-synchronized的使用\"><a href=\"#1-synchronized的使用\" class=\"headerlink\" title=\"1. synchronized的使用\"></a>1. synchronized的使用</h1><h2 id=\"1-1-经典的单例模式\"><a href=\"#1-1-经典的单例模式\" class=\"headerlink\" title=\"1.1 经典的单例模式\"></a>1.1 经典的单例模式</h2><p>为了保证类只有一个实例，需要保证只有一个线程能使用Class文件创建类对象，这样就可以对<code>SingletonPattern.class</code>加锁，保证资源独享。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonPattern</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//volatile 用于禁止JVM指令重排</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> SingletonPattern INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> SingletonPattern <span class=\"title function_\">getINSTANCE</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(INSTANCE == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonPattern.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(INSTANCE == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//具体的初始化逻辑</span></span><br><span class=\"line\">                    INSTANCE = <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonPattern</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">350L</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-用法\"><a href=\"#1-2-用法\" class=\"headerlink\" title=\"1.2 用法\"></a>1.2 用法</h2><p>synchronized用法一般可以分为两大类，对方法进行同步和对代码块进行同步。</p>\n<ol>\n<li><p>代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//对对象进行加锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0 aload_0</span><br><span class=\"line\"> 1 dup</span><br><span class=\"line\"> 2 astore_1</span><br><span class=\"line\"> 3 monitorenter</span><br><span class=\"line\"> 4 getstatic #25 &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span><br><span class=\"line\"> 7 ldc #39 &lt;test2&gt;</span><br><span class=\"line\"> 9 invokevirtual #33 &lt;java/io/PrintStream.println : (Ljava/lang/String;)V&gt;</span><br><span class=\"line\">12 aload_1</span><br><span class=\"line\">13 monitorexit</span><br><span class=\"line\">14 goto 22 (+8)</span><br><span class=\"line\">17 astore_2</span><br><span class=\"line\">18 aload_1</span><br><span class=\"line\">19 monitorexit</span><br><span class=\"line\">20 aload_2</span><br><span class=\"line\">21 athrow</span><br><span class=\"line\">22 return</span><br></pre></td></tr></table></figure>\n\n<p>字节码可以看到代码块通过<strong>monitorenter</strong>和<strong>monitorexit</strong>来实现加锁和释放锁</p>\n</li>\n<li><p>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对方法进行加锁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//观察字节码方法同步是通过设置标志ACC_SYNCHRONIZED来实现的,(方法中没有monitorenter等同步字节码)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0029</span>) ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: getstatic     #<span class=\"number\">12</span>                 <span class=\"comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: ldc           #<span class=\"number\">18</span>                 <span class=\"comment\">// String test1</span></span><br><span class=\"line\">         <span class=\"number\">5</span>: invokevirtual #<span class=\"number\">20</span>                 <span class=\"comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">         <span class=\"number\">8</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">12</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">13</span>: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>不论是代码块还是方法，synchronized同步都是针对对象进行的。代码块直接是操作对象，方法会根据是否是static方法来判断是对class对象还是实例对象进行加锁（static方法属于类而不是实例对象）。</p>\n<h1 id=\"2-synchronized的实现\"><a href=\"#2-synchronized的实现\" class=\"headerlink\" title=\"2. synchronized的实现\"></a>2. synchronized的实现</h1><h2 id=\"2-1-概述\"><a href=\"#2-1-概述\" class=\"headerlink\" title=\"2.1 概述\"></a>2.1 概述</h2><p><strong>特性</strong>：原子性、可见性、可重入性、有序性</p>\n<p>synchronized的实现依赖于JVM，java对象在JVM中会按<strong>对象头、实例数据和对齐填充</strong>的形式存储，了解synchronized我们只需要关注对象头就行了。</p>\n<p><strong>对象头结构</strong>：</p>\n<ul>\n<li><p><strong>mark-word</strong>：对象标记字段占 4 个字节，用于存储一些列的标记位，比如：哈希值、轻量级锁的标记位，偏向锁标记位、分代年龄等。</p>\n</li>\n<li><p><strong>Klass Pointer</strong>：Class 对象的类型指针，Jdk1.8 默认开启指针压缩后为 4 字节，关闭指针压缩（-XX:-UseCompressedOops）后，长度为 8 字节。其指向的位置是对象对应的 Class 对象（其对应的元数据对象）的内存地址。</p>\n</li>\n</ul>\n<p>mark-word在各锁状态的总览：</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/jvm_markWord.png\" alt=\"jvm_markWord\">\n\n<p>markWord使用3位来表示对象的五种状态（无锁，偏向锁，轻量锁，重量锁，以及 GC 标记），线程在竞争锁时会判断对象加锁情况进行竞争。</p>\n<h2 id=\"2-2-无锁-偏向锁\"><a href=\"#2-2-无锁-偏向锁\" class=\"headerlink\" title=\"2.2 无锁-&gt;偏向锁\"></a>2.2 无锁-&gt;偏向锁</h2><p>无锁状态时MarkWord中会存放<strong>HashCode</strong>、<strong>分代年龄</strong>等信息。当一个线程来请求获取锁时,此时MarkWord前54bit会用来表示持有该锁的线程，Epoch表示该锁的版本戳，当该线程再次来访问时可以直接访问，不需要同步。</p>\n<p>JDK15之后偏向锁就被弃用了，因为使用锁的场景大多是多个线程竞争的情况，而偏向锁的优势是<strong>可以节省同一个线程多次请求同一锁时同步消耗的资源</strong>，这样一来多个线程竞争时反而会因为偏向锁向轻量级锁转变造成资源的浪费。</p>\n<p>JDK8之前可以设置<code>-XX:-UseBiasedLocking</code>来禁用偏向锁，另外JVM延迟设置偏向锁，所以下面测试偏向锁需要sleep()或者<code>-XX:BiasedLockingStartupDelay=0</code>关闭延迟偏向锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span> InterruptedException&#123;</span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (o)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印，观察对象加锁情况</span></span><br><span class=\"line\">            System.out.println(ClassLayout.parseInstance(o).toPrintable()); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--查看对象头工具--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;version&gt;0.9&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">          &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F;可以看到加上参数后，对象加的是轻量级锁（观察开头4个字节最后三位，顺序是倒过来的，所以最后8位是<code>c8</code>，最后两位是00）</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/image-20240513145730228.png\" alt=\"image-20240513145730228\">\n\n<p>&#x2F;&#x2F;不加参数的情况，最后三位是101，加的是偏向锁</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/image-20240513150908609.png\" alt=\"image-20240513150908609\">\n\n<h2 id=\"2-3-偏向锁-轻量级锁\"><a href=\"#2-3-偏向锁-轻量级锁\" class=\"headerlink\" title=\"2.3 偏向锁-&gt;轻量级锁\"></a>2.3 偏向锁-&gt;轻量级锁</h2><p>多个线程竞争同一把锁且竞争不太激烈时，偏向锁会升级为轻量级锁（CAS自旋来获取），虚拟机会在当前线程的栈帧中创建一个LockRecord空间，储存当前锁对象的MarkWord拷贝（主要是为记录了HashCode，分代年龄等内容）。</p>\n<p>线程竞争锁时会先将MarkWord复制到栈帧中，之后<strong>通过CAS尝试将锁对象的LockRecord指针指向栈帧中的LockRecord</strong>，并将owner指针指向锁对象的MarkWord，CAS操作成功后将锁对象MarkWord锁字段更新为00，表示轻量级锁。CAS失败后会检查MarkWord中LockRecord指针是否指向当前线程的栈帧，如果是则表明已抢到锁，否则自旋等待。</p>\n<p><strong>概述</strong>：轻量级锁抢占需要维持对象和线程的双向联系，<strong>锁对象的LockRecord需要指向栈帧中的LockRecord</strong>，<strong>栈帧中的owner指针需要指向锁对象的MarkWord</strong>。只有同时满足这两个联系，才算成功加锁。</p>\n<h3 id=\"LockRecord和owner分别是什么？\"><a href=\"#LockRecord和owner分别是什么？\" class=\"headerlink\" title=\"LockRecord和owner分别是什么？\"></a>LockRecord和owner分别是什么？</h3><p>LockRecord在openjdk中通过以下两个类来实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A BasicObjectLock associates a specific Java object with a BasicLock.</span></span><br><span class=\"line\"><span class=\"comment\">// It is currently embedded in an interpreter frame(在栈的解释帧上分配).</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicObjectLock</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VMStructs</span>;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  BasicLock _lock; <span class=\"comment\">// 锁</span></span><br><span class=\"line\">  oop       _obj; <span class=\"comment\">// 持有锁的对象，owner的实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicLock</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> markOop _displaced_header;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当字节码解释器执行monitorenter字节码轻量地锁住一个对象时，就会在获取锁的线程的栈上显式或隐式分配一个lock record。</p>\n<p>栈帧中解释帧包含一个区域，该区域保存激活拥有的所有监视器的锁记录。在解释的方法执行期间，该区域根据持有的锁数量增长或缩小。lock record在线程的Interpretered Frame（解释帧）上分配。</p>\n<p>其实关于LockRecord只需要知道，<strong>在轻量级锁时JVM会在栈帧中创建一个对象（对象中有着owner指针）来进行线程与加锁对象的双向关联</strong></p>\n<h2 id=\"2-4-轻量级锁-重量级锁\"><a href=\"#2-4-轻量级锁-重量级锁\" class=\"headerlink\" title=\"2.4 轻量级锁-&gt;重量级锁\"></a>2.4 轻量级锁-&gt;重量级锁</h2><p>当CAS自旋达到一定次数会变成重量级锁，这时线程会进入ObjectMonitor的阻塞队列中，当锁被释放时会随机从队列中唤醒一个进程持有锁。持有锁的线程执行Object.wait()方法阻塞会转移到<strong>WaitSet</strong>队列，等待被notify()或notifyAll()唤醒后会进入<strong>EntryList</strong>中。</p>\n<p><strong>ObjectMonitor结构</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMonitor() &#123;</span><br><span class=\"line\">\t_header = NULL;</span><br><span class=\"line\">\t_count = <span class=\"number\">0</span>; <span class=\"comment\">// 记录个数</span></span><br><span class=\"line\">\t_waiters = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t_recursions = <span class=\"number\">0</span>; <span class=\"comment\">// 线程重入次数</span></span><br><span class=\"line\">\t_object = NULL; <span class=\"comment\">// 存储 Monitor 对象</span></span><br><span class=\"line\">\t_owner = NULL; <span class=\"comment\">// 持有当前线程的 owner</span></span><br><span class=\"line\">\t_WaitSet = NULL; <span class=\"comment\">// 处于 wait 状态的线程，会被加入到 _WaitSet</span></span><br><span class=\"line\">\t_WaitSetLock = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t_Responsible = NULL ;</span><br><span class=\"line\">\t_succ = NULL ;</span><br><span class=\"line\">\t_cxq = NULL ; <span class=\"comment\">// 单向列表</span></span><br><span class=\"line\">\tFreeNext = NULL ;</span><br><span class=\"line\">\t_EntryList = NULL ; <span class=\"comment\">// 处于等待锁 block 状态的线程，会被加入到该列表</span></span><br><span class=\"line\">\t_SpinFreq = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t_SpinClock = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\tOwnerIsThread = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t_previous_owner_tid = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个对象都会关联一个ObjectMonitor，java通过ObjectMonitor来管理重量级锁。</p>\n<img src=\"/2024/05/08/java%E4%B8%A4%E9%94%81%E4%B9%8B%E4%B8%80%E7%9A%84synchronized/java重量级锁.webp\" alt=\"java重量级锁\" style=\"zoom:80%;\">\n\n<p><strong>重量级锁的升级条件</strong>：</p>\n<ol>\n<li>从轻量级锁升级为重量级锁的条件： 自旋超过一定次数（默认10次），可以通过<code>-XX:PreBlockSpin</code>设置次数</li>\n<li>从无锁&#x2F;偏向锁直接升级为重量级锁的条件：<strong>调用了object.wait()方法，则会直接升级为重量级锁！</strong></li>\n</ol>"},{"title":"java两锁之一的ReetrantLock","date":"2024-05-13T12:03:35.000Z","_content":"","source":"_posts/java两锁之一的ReetrantLock.md","raw":"---\ntitle: java两锁之一的ReetrantLock\ndate: 2024-05-13 20:03:35\ntags:\n---\n","slug":"java两锁之一的ReetrantLock","published":1,"updated":"2024-05-13T12:03:35.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw6d4bal000dpsus66y40y5l","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/Spring自动装配原理/模块装配二.png","slug":"模块装配二.png","post":"clw6d4baj0007psus7us699w0","modified":0,"renderable":0},{"_id":"source/_posts/Spring自动装配原理/模块装配方式一.png","slug":"模块装配方式一.png","post":"clw6d4baj0007psus7us699w0","modified":0,"renderable":0},{"_id":"source/_posts/java两锁之一的synchronized/image-20240513145730228.png","slug":"image-20240513145730228.png","post":"clw6d4bak0009psus76r7cfmj","modified":0,"renderable":0},{"_id":"source/_posts/java两锁之一的synchronized/image-20240513150908609.png","slug":"image-20240513150908609.png","post":"clw6d4bak0009psus76r7cfmj","modified":0,"renderable":0},{"_id":"source/_posts/java两锁之一的synchronized/java重量级锁.webp","slug":"java重量级锁.webp","post":"clw6d4bak0009psus76r7cfmj","modified":0,"renderable":0},{"_id":"source/_posts/java两锁之一的synchronized/jvm_markWord.png","slug":"jvm_markWord.png","post":"clw6d4bak0009psus76r7cfmj","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clw6d4bad0001psusc3rf1kwf","category_id":"clw6d4bah0004psuserji1a6f","_id":"clw6d4bam000epsus0ex5alb0"},{"post_id":"clw6d4bag0003psuse9ec34f7","category_id":"clw6d4bal000apsus94cr2jxc","_id":"clw6d4ban000hpsusadfv6who"},{"post_id":"clw6d4baj0007psus7us699w0","category_id":"clw6d4bam000fpsush8l5c8me","_id":"clw6d4bao000npsus6ekv9e1d"},{"post_id":"clw6d4bak0008psus3yhzfb03","category_id":"clw6d4bam000fpsush8l5c8me","_id":"clw6d4bap000qpsus3a6p88vd"},{"post_id":"clw6d4bak0009psus76r7cfmj","category_id":"clw6d4bam000fpsush8l5c8me","_id":"clw6d4bap000tpsus5l3h5mmp"}],"PostTag":[{"post_id":"clw6d4bad0001psusc3rf1kwf","tag_id":"clw6d4bai0005psusazjd25aa","_id":"clw6d4bal000cpsus0de39yp0"},{"post_id":"clw6d4bag0003psuse9ec34f7","tag_id":"clw6d4bal000bpsus80aqgzct","_id":"clw6d4bao000kpsusc4teg0cd"},{"post_id":"clw6d4bag0003psuse9ec34f7","tag_id":"clw6d4bam000gpsus3l794o9b","_id":"clw6d4bao000lpsus94mdejg5"},{"post_id":"clw6d4baj0007psus7us699w0","tag_id":"clw6d4ban000jpsus9s6d2jvd","_id":"clw6d4bap000ppsus9mds3y5z"},{"post_id":"clw6d4bak0008psus3yhzfb03","tag_id":"clw6d4bap000opsus7bh985c6","_id":"clw6d4bap000spsus38ghhfkp"},{"post_id":"clw6d4bak0009psus76r7cfmj","tag_id":"clw6d4bap000rpsusfqgg0in9","_id":"clw6d4bap000upsus24v3gu4a"}],"Tag":[{"name":"计算机网络","_id":"clw6d4bai0005psusazjd25aa"},{"name":"redis","_id":"clw6d4bal000bpsus80aqgzct"},{"name":"分布式锁","_id":"clw6d4bam000gpsus3l794o9b"},{"name":"Spring","_id":"clw6d4ban000jpsus9s6d2jvd"},{"name":"juc","_id":"clw6d4bap000opsus7bh985c6"},{"name":"java锁","_id":"clw6d4bap000rpsusfqgg0in9"}]}}